{"/research/about/":{"data":{"about-this-site#About This Site":"About This SiteThis website serves as a curated collection of research findings across diverse topics, presented in an accessible, documentation-style format.\nThis site serves as a centralized hub for clear, structured summaries of investigations, experiments, and discoveries—ranging from science and technology to humanities and beyond. Each topic is broken down into digestible sections, making complex information easy to navigate and reference.","why-documentation-format#Why Documentation Format?":" Clarity: Findings are presented as standardized docs for consistency. Utility: Quick scanning, searchability, and reproducibility are prioritized. Flexibility: Topics are updated or expanded as new insights emerge. Whether you’re a researcher, student, or curious mind, this project aims to bridge gaps between disciplines and democratize knowledge."},"title":"about"},"/research/autonomous_drone/":{"data":{"":"This project focuses on the development of an open source drone from the ground up."},"title":"About the Open Source Autonomous Drone Project"},"/research/autonomous_drone/1_flight_hardware/":{"data":{"hardware#Hardware":"Hardware"},"title":"1 - Flight Hardware"},"/research/autonomous_drone/2_3d_design/":{"data":{"3d-design#3D Design":"3D Design"},"title":"2 - 3D Design"},"/research/autonomous_drone/3_flight_controller/":{"data":{"drehmflight#dRehmFlight":"dRehmFlight"},"title":"3 - Flight Controller"},"/research/autonomous_drone/4_flight_computer/":{"data":{"flight-computer#Flight Computer":"Flight Computer"},"title":"4 - Flight Computer"},"/research/autonomous_drone/5_swarm_building/":{"data":{"swarm-building#Swarm Building":"Swarm Building"},"title":"5 - Swarm Building"},"/research/can_car_system/":{"data":{"":"This project focuses on the development of an open source Controller Area Network (CAN) system for combustion engines from the ground up."},"title":"About the Open Source CAN System **Project**"},"/research/can_car_system/1_performance_ground_vehicle_components/":{"data":{"drivetrain#Drivetrain":"Transmission Differential Axles Transfer Case ","engine#Engine":"Fueling Air Intake Combustion Exhaust ","handling#Handling":"Suspension Brakes Steering Tires ","performance-ground-vehicle-components#Performance Ground Vehicle Components":"Performance Ground Vehicle ComponentsThis section covers the various components of a performance ground vehicle, including their functions and how they interact within the system."},"title":"1 - Performance Ground Vehicle Components"},"/research/can_car_system/2_engine_components/":{"data":{"air-intake-system#Air Intake System":"","combustion-and-power-generation#Combustion and Power Generation":"","cooling--lubrication#Cooling \u0026amp; Lubrication":"Inside A 4 Stroke Combustion EngineThis section covers the various components of an engine, including their functions and how they interact within the system. Understanding these components is crucial for diagnosing issues and improving performance.\nFour-Stroke Cycle Fuel System Carburetor\nFuel Injection System\nAir Intake System Air Intake Duct\nAir Filter\nThrottle Body\nIntake Manifold\nCombustion and Power Generation Cylinders\nPiston Heads\nEngine Coils\nSpark Plugs\nValves\nRockers\nCrank Case Piston Arms\nCamshaft\nCam Lobes\nCrankshaft\nExhaust System Exhaust Manifold\nExhaust Headers\nCooling \u0026 Lubrication Torque vs Horsepower ","crank-case#Crank Case":"","exhaust-system#Exhaust System":"","four-stroke-cycle#Four-Stroke Cycle":"","fuel-system#Fuel System":"","inside-a-4-stroke-combustion-engine#Inside A 4 Stroke Combustion Engine":""},"title":"2 - Engine Components"},"/research/can_car_system/3_sensors/":{"data":{"auxiliary-sensors#Auxiliary Sensors":"Fuel Level\nThrottle Position\nBoost Pressure\nCamshaft Position\nEngine Temperature / Engine Coolant\nKnock Sensor\nTire Pressure\nRide Height","sensors#Sensors":"SensorsThis section covers the various sensors used in a CAN system, including their functions and how they interact within the system.","sensors-for-monitoring-performance#Sensors For Monitoring Performance":"Crankshaft Position\nO2\nMAP\nMAF","sensors-for-monitoring-vehicle-handling#Sensors For Monitoring Vehicle Handling":"Steering angle\nWheel speed\nYaw Rate (Gyro)"},"title":"3 - Sensors"},"/research/can_car_system/4_data_handling_firmware/":{"data":{"":"","data-handling-and-firmware#Data Handling and Firmware":"This section covers the data handling processes and firmware used in a CAN system, including their functions and how they interact within the system.\nEngine Tuning VE MAP AFR MAP Dashboard Inidcators and Triggers "},"title":"4 - Data Handling and Firmware"},"/research/can_car_system/5_can_protocol/":{"data":{"":"This section covers the CAN protocol used in a CAN system, including its functions and how it interacts with various components within the system."},"title":"5 - CAN Protocol"},"/research/can_car_system/6_can_arduino/":{"data":{"":" Wire Guage: 22 AWG Voltage from Arduino: 5V Expected Current: 20mA = 0.02A Resistivity of Wire: 16.14 ohms per 1000 fee Maximum Wire Length: 330-1000 feet (100-300 meters) ","mcp2515-can-controller#MCP2515 CAN Controller":"","tja1050-can-transceiver#TJA1050 CAN Transceiver":""},"title":"6 - CAN Arduino Setup"},"/research/gps_denied_rover/":{"data":{"":"This project focuses on the development of a full-stack proof of concept that integrates cutting-edge AI research, autonomous swarm coordination, and real-time localization techniques to support a land-based rover operating in GPS-denied environments. The system utilizes drone-based agents to deliver precise positional corrections based on known GPS coordinates, enabling robust and resilient navigation.","key-contributions#Key Contributions":" Physics-Based Communication Modeling\nApplied mathematical, geometric, and physical principles to merge radio communication techniques with accurate position estimation.\nAlgorithm Design and Optimization\nCreated and implemented efficient algorithms that reduce computational load and minimize hardware dependency.\nHardware vs. Accuracy Evaluation\nConducted detailed analyses of system performance trade-offs between cost-effective hardware and localization accuracy.\nError Source Investigation\nExplored and modeled key sources of positioning error in 2D and 3D environments, including:\nTime of Flight (ToF) distance measurement Multilateration-based positioning Occlusion and line-of-sight limitations Swarm-Based Optimization\nWorked within a multi-disciplinary team to develop dynamic drone swarm behaviors that enhance rover localization by adaptively repositioning based on real-time data.\nThis project bridges AI, robotics, and communication theory to deliver a resilient localization system capable of navigating challenging, signal-denied terrains."},"title":"About the GPS-Denied Rover Localization Project"},"/research/gps_denied_rover/11_llms_ai_at_the_edge/":{"data":{"":"“When you buy better sensors, what your buying is less noise. AI is very good at de-noising. Just take a cheap sensor and de-noise it. Then you can do something for 1/100th of the price.” - Ian Laffey, Thesus"},"title":"11_LLMs_AI_at_the_edge"},"/research/gps_denied_rover/1_multilateration/":{"data":{"":"","applications-in-gps-denied-land-surveying#Applications in GPS-Denied Land Surveying":"Multilateration provides a robust solution for rovers operating in GPS-denied environments by leveraging drone swarms as mobile reference beacons. The technique enables:\nContinuous Positioning: Real-time location updates as the rover moves\nScalable Accuracy: More reference drones generally improve positioning precision\nFlexible Deployment: Drones can be repositioned to optimize geometric configuration\nRedundancy: Additional reference points beyond the minimum provide error checking and improved reliability\nThe mathematical foundations ensure that with proper geometric distribution of reference points and accurate distance measurements, multilateration can achieve positioning accuracy suitable for precision land surveying applications.","multilateration-in-three-dimensions#Multilateration in Three Dimensions":"Constraints for 3D Multilateration Minimum Reference Points: A minimum of four known locations is required to uniquely determine an unknown location in three dimensions\nDistance Separation: No known location should be the same distance from the unknown location as any other known location\nAngular Separation: Known locations should not be positioned at the same angle from the unknown location\nNon-coplanar Positioning: The four reference points should not be coplanar to ensure a unique 3D solution\nAdditional Constraints for Drone Swarm Applications Altitude Constraints: Maintaining all drones within the same altitude creates an imaginary XY plane constraint\nAdvantages: Easier 2D visualization on screens, reduced computational power for position rendering\nDisadvantages: Added constraint makes optimal drone positioning more challenging for effective multilateration\nMathematical Overview for 3D Three-dimensional multilateration uses spheres instead of circles, with the unknown position located at the intersection of multiple spheres.\nFor each known position $(x_i, y_i, z_i)$ and measured distance $d_i$:\n$$(x - x_i)^2 + (y - y_i)^2 + (z - z_i)^2 = d_i^2$$\nThe solution process involves:\nSphere Generation: Create spheres centered at known locations with radii equal to measured distances\nSphere-Sphere Intersections: When two spheres intersect, they form a circle (intersection plane)\nCircle Intersections: Multiple intersection circles from sphere pairs converge at the unknown point\nConvergence Point: Find the point of maximum circle intersections\nSphere Intersection Mathematics When two spheres intersect, they create a circular intersection. For spheres centered at $(x_1, y_1, z_1)$ and $(x_2, y_2, z_2)$ with radii $r_1$ and $r_2$:\nThe intersection circle lies on a plane perpendicular to the line connecting the sphere centers. The circle’s center is located at:\n$$\\mathbf{c} = \\mathbf{p_1} + a \\cdot \\frac{\\mathbf{p_2} - \\mathbf{p_1}}{|\\mathbf{p_2} - \\mathbf{p_1}|}$$\nwhere: $$a = \\frac{r_1^2 - r_2^2 + d^2}{2d}$$\nand $d$ is the distance between sphere centers.\nThe intersection circle’s radius is: $$h = \\sqrt{r_1^2 - a^2}$$\nWith four or more spheres, multiple intersection circles are generated, and their convergence point represents the unknown position. This is typically solved using least-squares optimization to find the point that minimizes the sum of squared distances to all intersection planes.\nSphere-Sphere Intersection Calculations To find the circular intersection between two spheres:\nStep 1: Define sphere parameters\nSphere 1: center $\\mathbf{c_1} = (x_1, y_1, z_1)$, radius $r_1$\nSphere 2: center $\\mathbf{c_2} = (x_2, y_2, z_2)$, radius $r_2$\nStep 2: Calculate distance between centers: $$d = |\\mathbf{c_2} - \\mathbf{c_1}| = \\sqrt{(x_2-x_1)^2 + (y_2-y_1)^2 + (z_2-z_1)^2}$$\nStep 3: Check intersection conditions:\nIf $d \u003e r_1 + r_2$: Spheres don’t intersect\nIf $d \u003c |r_1 - r_2|$: One sphere contains the other\nIf $d = 0$: Spheres are concentric\nStep 4: Calculate intersection circle parameters: $$a = \\frac{r_1^2 - r_2^2 + d^2}{2d}$$$$h = \\sqrt{r_1^2 - a^2}$$\nStep 5: Find intersection circle center: $$\\mathbf{p} = \\mathbf{c_1} + a \\cdot \\frac{\\mathbf{c_2} - \\mathbf{c_1}}{d}$$\nStep 6: Define intersection plane\nThe intersection circle lies on a plane with:\nCenter: $\\mathbf{p}$\nNormal vector: $\\mathbf{n} = \\frac{\\mathbf{c_2} - \\mathbf{c_1}}{d}$\nRadius: $h$\nFinding the Point of Maximum Circle Intersections Step 1: Generate all sphere-pair intersection circles\nFor $n$ spheres, compute intersection circles for all $\\binom{n}{2}$ sphere pairs.\nStep 2: Convert circles to plane equations\nEach intersection circle defines a plane equation: $$n_x(x - p_x) + n_y(y - p_y) + n_z(z - p_z) = 0$$\nStep 3: Solve system of plane equations using least squares\nConstruct the overdetermined system $\\mathbf{A}\\mathbf{x} = \\mathbf{b}$:\n$$ \\mathbf{A} = \\begin{bmatrix} n_{1x} \u0026 n_{1y} \u0026 n_{1z} \\ n_{2x} \u0026 n_{2y} \u0026 n_{2z} \\ \\vdots \u0026 \\vdots \u0026 \\vdots \\ n_{mx} \u0026 n_{my} \u0026 n_{mz} \\end{bmatrix}, \\quad \\mathbf{b} = \\begin{bmatrix} \\mathbf{n_1} \\cdot \\mathbf{p_1} \\ \\mathbf{n_2} \\cdot \\mathbf{p_2} \\ \\vdots \\ \\mathbf{n_m} \\cdot \\mathbf{p_m} \\end{bmatrix} $$\nStep 4: Solve for unknown position:\n$$ \\mathbf{x} = (\\mathbf{A}^T \\mathbf{A})^{-1} \\mathbf{A}^T \\mathbf{b} $$\nAlternative Method: Point-Circle Distance Minimization\nStep 1: Define objective function\nFor each intersection circle $i$ with center $\\mathbf{p_i}$, normal $\\mathbf{n_i}$, and radius $h_i$:\n$$f_i(\\mathbf{x}) = \\left| |\\mathbf{x} - \\mathbf{p_i} - (\\mathbf{n_i} \\cdot (\\mathbf{x} - \\mathbf{p_i}))\\mathbf{n_i}| - h_i \\right|^2$$\nStep 2: Minimize total error:\n$$ \\mathbf{x}{\\text{optimal}} = \\arg\\min{\\mathbf{x}} \\sum_{i=1}^{m} f_i(\\mathbf{x}) $$\nThis minimization finds the point that lies closest to all intersection circles simultaneously.","multilateration-in-two-dimensions#Multilateration in Two Dimensions":"Constraints for 2D Multilateration Minimum Reference Points: A minimum of three known locations is required to uniquely determine an unknown location in two dimensions\nDistance Separation: Ideally, no known location should be the same distance from the unknown location as any other known location, as this creates ambiguous intersections\nAngular Separation: Known locations should not be positioned at the same angle from the unknown location to avoid geometric degeneracy\nNon-collinear Positioning: The three reference points should not be collinear to ensure a unique solution\nIn a drone swarm scenario, this means at least three drones with known positions are needed to calculate the rover’s location effectively.\nMathematical Overview for 2D The mathematical foundation of 2D multilateration involves creating circles centered at each known position with radii equal to the measured distances:\nFor each known position $(x_i, y_i)$ and measured distance $d_i$ to the unknown position $(x, y)$:\n$$(x - x_i)^2 + (y - y_i)^2 = d_i^2$$\nWith three or more known positions, we generate multiple circles. The unknown position is located at the point where the maximum number of circle intersections occur.\nThe system of equations can be solved by:\nCircle Generation: Create circles with origins at known locations and radii equal to measured distances\nIntersection Finding: Calculate all pairwise circle intersections\nConvergence Point: Identify the point with maximum intersections (ideally where all circles meet)\nFor three circles, the mathematical solution involves solving the system:\n$$ \\begin{cases} (x - x_1)^2 + (y - y_1)^2 = d_1^2 \\ (x - x_2)^2 + (y - y_2)^2 = d_2^2 \\ (x - x_3)^2 + (y - y_3)^2 = d_3^2 \\end{cases} $$\nCircle-Circle Intersection Calculations To find intersection points between two circles with centers $(x_1, y_1)$ and $(x_2, y_2)$ and radii $r_1$ and $r_2$:\nStep 1: Calculate the distance between centers: $$d = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$$\nStep 2: Check for intersection conditions:\nIf $d \u003e r_1 + r_2$: Circles are too far apart (no intersection)\nIf $d \u003c |r_1 - r_2|$: One circle is contained within the other (no intersection)\nIf $d = 0$ and $r_1 = r_2$: Circles are identical (infinite intersections)\nStep 3: Calculate intersection points when they exist: $$a = \\frac{r_1^2 - r_2^2 + d^2}{2d}$$$$h = \\sqrt{r_1^2 - a^2}$$\nStep 4: Find the midpoint between intersections: $$x_m = x_1 + a \\cdot \\frac{x_2 - x_1}{d}$$ $$y_m = y_1 + a \\cdot \\frac{y_2 - y_1}{d}$$\nStep 5: Calculate the two intersection points: $$x_{int1} = x_m + h \\cdot \\frac{y_1 - y_2}{d}$$ $$y_{int1} = y_m + h \\cdot \\frac{x_2 - x_1}{d}$$$$x_{int2} = x_m - h \\cdot \\frac{y_1 - y_2}{d}$$ $$y_{int2} = y_m - h \\cdot \\frac{x_2 - x_1}{d}$$\nFinding the Point of Maximum Intersections Step 1: Generate all pairwise circle intersections\nFor $n$ circles, compute intersections for all $\\binom{n}{2}$ circle pairs, creating a set of candidate points.\nStep 2: Count intersections for each candidate point\nFor each candidate point $(x_c, y_c)$, count how many circles it lies on within a tolerance $\\epsilon$:\n$$\\text{count} = \\sum_{i=1}^{n} \\begin{cases} 1 \u0026 \\text{if } |\\sqrt{(x_c - x_i)^2 + (y_c - y_i)^2} - d_i| \\leq \\epsilon \\ 0 \u0026 \\text{otherwise} \\end{cases}$$\nStep 3: Select optimal point\nChoose the candidate point with the highest intersection count. If multiple points have the same maximum count, select based on additional criteria (e.g., geometric center, minimum total error).","what-is-multilateration#What is Multilateration?":"Multilateration is a positioning technique that determines the location of an unknown point by using distance measurements from multiple known reference points. The fundamental principle involves creating geometric constraints (circles in 2D, spheres in 3D) centered at each known location with radii equal to the measured distances. The unknown position is found at the intersection of these geometric constraints.\nIn the context of an agent swarm, such as drones assisting a GPS-denied rover conducting land surveys, multilateration enables precise positioning by having multiple drones with known locations measure their distances to the rover and calculate its position through geometric intersection."},"title":"1 - Multilateration"},"/research/gps_denied_rover/2_tof_distance_between_devices/":{"data":{"":"","1-core-variables-for-distance-calculation-using-time-of-flight#1. Core Variables for Distance Calculation Using Time-of-Flight":"1.1 Fundamental Physics The distance between two radio transceivers is determined using the fundamental relationship between distance, speed, and time:\nBasic Time-of-Flight Equation: $$d = c \\cdot t$$\nWhere:\n$d$ = distance between transceivers (meters)\n$c$ = speed of light in vacuum ≈ 2.998 × 10⁸ m/s\n$t$ = time for signal to travel one-way (seconds)\n1.2 Two-Way Time-of-Flight (Round-Trip) For practical implementation using send-acknowledge protocols:\n$$d = (c \\cdot Δt) / 2 $$\nWhere:\n$Δt$ = round-trip time (T₂ - T₁)\n$T₁$ = time when signal is transmitted\n$T₂$ = time when acknowledgment is received\nDivision by 2 accounts for round-trip nature\n1.3 Additional Physical Considerations Signal Propagation in Air: $$c_{\\mathrm{air}} = \\frac{c}{n_{\\mathrm{air}}} \\approx 2.997 \\cdot 10^8 \\ \\mathrm{m/s}$$ Where $n_air ≈ 1.0003$ (refractive index of air at standard conditions)\nEnvironmental Factors:\nTemperature variations: ±0.1% speed variation per 30°C\nHumidity effects: negligible for radio frequencies\nAtmospheric pressure: minimal impact at operational altitudes","2-relationship-between-clock-precision-and-distance-accuracy#2. Relationship Between Clock Precision and Distance Accuracy":"2.1 Error Propagation Analysis Any error in time measurement directly translates to distance error:\n$$Δd = c \\cdot Δt $$\nFor round-trip measurements: $$\\Delta d = \\frac{c \\cdot \\sigma_{t}}{2}$$\nWhere $\\sigma_{t}$ is the uncertainty in round-trip time measurement.\n2.2 Clock Precision to Distance Accuracy Conversion Required Time Resolution for Target Accuracy: $$\\Delta t = \\frac{\\Delta d}{c}$$\nRequired Clock Frequency: $$f_{\\mathrm{clock}} = \\frac{1}{\\Delta t} = \\frac{c}{\\Delta d}$$\n2.3 System-Level Position Accuracy For a multilateration system with $n$ agents, each with distance measurement accuracy $σ_d$, the position accuracy follows error propagation principles:\nGeometric Dilution of Precision (GDOP): $$\\sigma_{\\mathrm{position}} = \\mathrm{GDOP} \\cdot \\sigma_d$$\nFor well-conditioned geometry (4+ agents): $$\\sigma_{\\mathrm{position}} \\approx \\sqrt{\\frac{\\sigma_d^2}{n}} \\times k_{\\mathrm{geometry}}$$\nWhere $k_{\\mathrm{geometry}}$ typically ranges from 1.2 to 2.5 depending on agent spatial distribution.\nVolume Uncertainty (for 3D positioning): $$\\sigma_{\\mathrm{V}} = \\frac{4}{3} \\pi \\cdot \\sigma_{\\mathrm{position}}^3$$\n2.4 Reference Table: Clock Precision vs. Accuracy Clock Precision Distance Accuracy Positional Accuracy (4 agents) Volume Uncertainty 1 ms (10⁻³ s) 1.50 × 10⁵ m 1.83 × 10⁵ m 2.57 × 10¹⁶ m³ 1 μs (10⁻⁶ s) 1.50 × 10² m 1.83 × 10² m 2.57 × 10⁷ m³ 1 ns (10⁻⁹ s) 1.50 × 10⁻¹ m 1.83 × 10⁻¹ m 2.57 × 10⁻² m³ 1 ps (10⁻¹² s) 1.50 × 10⁻⁴ m 1.83 × 10⁻⁴ m 2.57 × 10⁻¹¹ m³ Assumptions: GDOP = 1.22, spherical uncertainty model","3-hardware-constraints-for-10-cm-accuracy#3. Hardware Constraints for 10 cm³ Accuracy":"3.1 Clock Precision Requirements Target Accuracy: 10 cm³ volume → $\\sigma_{\\mathrm{position}} \\approx 0.134 \\mathrm{ m}$\nRequired distance accuracy:\n$$\\sigma_d = \\frac{\\sigma_{\\mathrm{position}}}{\\mathrm{GDOP} \\times \\sqrt{\\frac{1}{n}}}$$\n$$\\sigma_d = \\frac{0.134}{1.22 \\times 0.5} = 0.22 \\mathrm{ m}$$\nRequired clock precision: $$\\Delta t = \\frac{\\sigma_d}{c} = \\frac{0.22}{2.998 \\times 10^{8}} = 7.34 \\times 10^{-10} \\mathrm{ s} = 734 \\mathrm{ ps}$$\nRequired clock frequency: $$f_{\\mathrm{clock}} \\geq \\frac{1}{\\Delta t} = 1.36 \\times 10^{9} \\mathrm{ Hz} \\approx 1.4 \\mathrm{ GHz}$$\n3.2 Radio Signal Frequency Constraints Nyquist Sampling Criterion:\nFor accurate amplitude measurement, the sampling frequency must be at least twice the signal frequency: $$f_{\\mathrm{clock}} \\geq 2 \\times f_{\\mathrm{signal}}$$ Maximum allowable signal frequency: $$f_{\\mathrm{signal}} \\leq \\frac{f_{\\mathrm{clock}}}{2} = \\frac{1.4, \\mathrm{GHz}}{2} = 700, \\mathrm{MHz}$$ Practical safety margin (10×): $$f_{\\mathrm{signal}} \\leq 70, \\mathrm{MHz} \\quad \\mathrm{(recommended)}$$\n3.3 Minimum Distance Constraints Wavelength calculation: $$\\lambda = \\frac{c}{f_{\\mathrm{signal}}}$$ For 70 MHz signal: $$\\lambda = \\frac{2.998 \\times 10^{8}}{70 \\times 10^{6}} = 4.28 \\mathrm{ m}$$ Minimum separation distance: $$d_{\\mathrm{min}} = \\lambda = 4.28 \\mathrm{ m}$$ This ensures agents operate in the far-field region where plane wave approximation is valid.\n3.4 Maximum Distance Constraints Free Space Path Loss (FSPL): $$\\mathrm{FSPL (dB)} = 20 \\log_{10}(d) + 20 \\log_{10}(f) + 32.44$$ Where $d$ is in km and $f$ is in MHz.\nLink Budget Analysis:\nFor a $1,W$ transmitter ($30,dBm$) and $-100,dBm$ receiver sensitivity:\n$$\\mathrm{Link Budget} = 30 - (-100) = 130, \\mathrm{dB}$$\nMaximum range calculation:\n$$\\begin{aligned} 130 \u0026= 20 \\log_{10}(d) + 20 \\log_{10}(70) + 32.44 \\ 130 \u0026= 20 \\log_{10}(d) + 36.9 + 32.44 \\ 20 \\log_{10}(d) \u0026= 130 - 36.9 - 32.44 = 60.66 \\ d \u0026= 10^{\\frac{60.66}{20}} = 1.07, \\mathrm{km} \\end{aligned}$$\nPractical maximum range: ~1 km (line-of-sight)\n3.5 Hardware Summary for 10 cm³ Accuracy Clock Precision: $\\geq 1.4\\ \\mathrm{GHz}$ ($734 ps$ resolution)\nSignal Frequency: ≤ $70 MHz$ (recommended)\nMinimum Agent Distance: $\\geq 4.3\\ \\mathrm{m}$\nMaximum Agent Distance: $\\leq 1.0\\ \\mathrm{km}$ ($1W$ transmitter)\nRequired Transmit Power: $\\geq 1,W$ (for $1,km$ range)","4-time-offset-calibration-and-compensation#4. Time Offset Calibration and Compensation":"4.1 Processing Delay Sources Agent Processing Delays:\nSignal detection and processing: $T_{\\mathrm{detect}}$\nAcknowledgment generation: $T_{\\mathrm{ack_{gen}}}$\nTransmission preparation: $T_{\\mathrm{tx_{prep}}}$\nRover Processing Delays:\nSignal reception and processing: $T_{\\mathrm{rx_{proc}}}$\nAcknowledgment transmission: $T_{\\mathrm{ack_{tx}}}$\nTotal System Delay: $$T_{\\mathrm{offset}} = T_{\\mathrm{detect}} + T_{\\mathrm{ack_gen}} + T_{\\mathrm{tx_{prep}}} + T_{\\mathrm{rx_{proc}}} + T_{\\mathrm{ack_{tx}}}$$\n4.2 Calibration Procedure Setup: Two systems at known distance $d_known$\nMeasurement Process:\nAgent transmits signal at time $T_1$\nRover receives and immediately acknowledges\nAgent receives acknowledgment at time $T_2$\nCalculate apparent distance: $d_{\\mathrm{measured}} = c \\times \\frac{(T_2 - T_1)}{2}$\nOffset Calculation for Distance: $$D_{\\mathrm{offset}} = d_{\\mathrm{known}} - d_{\\mathrm{measured}}$$\nOffset Calculation for Time: $$T_{\\mathrm{offset}} = \\frac{2 \\times D_{\\mathrm{offset}}}{c}$$\nCorrected Distance Formula:\n$$d_{\\mathrm{actual}} = c \\times \\frac{(T_2 - T_1 - T_{\\mathrm{offset}})}{2}$$\n4.3 Calibration Example Known distance: $10.00 m$\nMeasured time: $70.5 ns$\nCalculated distance: $10.56 m$\nDistance offset:\n$$\\mathrm{Distance}_{\\mathrm{offset}} = 10.00 - 10.56 = -0.56 \\mathrm{ m}$$\nTime offset:\n$$T_{\\mathrm{offset}} = \\frac{2 \\times (-0.56)}{2.998 \\times 10^{8}} = -3.74 \\times 10^{-9} \\mathrm{ s} = -3.74 \\mathrm{ ns}$$\nCorrection factor: Add $3.74 ns$ to all future measurements.","5-dual-communication-architecture-and-clock-management#5. Dual Communication Architecture and Clock Management":"5.1 System Architecture Overview The system employs a dual communication architecture to separate high-precision timing operations from general communications:\nCommunication System A: Command \u0026 Control\nBase station ↔ Agents communication\nGeneral health checks, status updates, positioning commands\nLower bandwidth requirements (~$1-10 kbps$)\nStandard radio protocols (LoRa, WiFi, etc.)\nContinuous operation with standard system clocks\nCommunication System B: Precision Timing\nAgents ↔ Rover distance measurements\nHigh-precision time-of-flight operations\nRequires high-speed, precision clocks ( $\\geq 1.4\\ \\mathrm{GHz}$)\nActivated only during measurement windows\nPower-managed operation to reduce thermal drift\n5.2 Clock Management Strategy Standard System Clocks:\nUsed for general operations and Communication System A\nTypical precision: $1-100 MHz$\nContinuous operation\nLower power consumption\nUsed for scheduling precision measurement windows\nPrecision Timing Clocks:\nUsed exclusively for ToF distance measurements\nRequired precision: $\\geq 1.4$ GHz for 10 cm³ accuracy\nSelective activation: Only powered during measurement cycles\nThermal stabilization period before measurement\nPower-down between measurement windows\n5.3 Measurement Cycle Management Precision Clock Activation Sequence:\nPre-measurement Phase (100-500 ms):\nBase station sends measurement command via System A\nAgents activate precision clocks\nThermal stabilization period\nClock calibration/drift check\nMeasurement Phase (1-10 ms):\nAgents perform ToF measurements with rover via System B\nHigh-precision timestamps recorded\nDistance calculations completed\nData Transmission Phase (10-50 ms):\nAgents transmit results to base station via System A\nPrecision clocks can be powered down\nBase station applies timestamp replacement\nStandby Phase (remainder of cycle):\nPrecision clocks powered down to minimize drift\nSystem maintains readiness via standard clocks\n5.4 Distributed Time Synchronization Clock Offset Model (Modified for Dual Architecture):\nEach agent maintains two time references: $$t_{\\mathrm{standard}} = t_{\\mathrm{universal}} + \\delta_{\\mathrm{standard}} + \\epsilon_{\\mathrm{standard}} \\times t$$ $$t_{\\mathrm{precision}} = t_{\\mathrm{universal}} + \\delta_{\\mathrm{precision}} + \\epsilon_{\\mathrm{precision}} \\times t_{\\mathrm{active}}$$\nWhere:\n$t_active$ = cumulative active time of precision clock\n$ε_precision$ « $ε_standard$ due to selective operation\nBase Station Timestamp Replacement:\nAdvantage: Eliminates need for perfect clock synchronization between systems\nProcess:\nAgent measures distance using precision clock (System B)\nAgent records measurement with standard clock timestamp\nAgent transmits via System A: {distance, standard_timestamp}\nBase station receives at time $T_{\\mathrm{base}}$ (standard clock)\nBase station replaces timestamp: {distance, $T_{\\mathrm{base}}$}\nTemporal Window Constraint:\nFor position updates every 1 second, all distance measurements must be collected within a synchronization window: $$\\Delta t_{\\mathrm{sync}} \\leq \\frac{\\sigma_{\\mathrm{position}}}{v_{\\max} \\times GDOP}$$\nWhere $v_{\\max}$ is maximum rover velocity.\nFor 10 cm accuracy and 10 m/s max velocity: $$\\Delta t_{\\mathrm{sync}} \\leq \\frac{0.1}{10 \\times 1.22} = 8.2 \\mathrm{ ms}$$\n5.5 Measurement Timing Requirements (Dual System) For 1 Hz position updates with 4 agents:\nComplete measurement cycle timing: $$T_{\\mathrm{total}} = T_{\\mathrm{stabilization}} + T_{\\mathrm{measure phase}} + T_{\\mathrm{transmit phase}} + T_{\\mathrm{compute}}$$ Detailed timing breakdown:\n$T_{\\mathrm{stabilization}} = 200 \\mathrm{ ms}$ (precision clock thermal stabilization) $T_{\\mathrm{measure phase}} = 4 \\times 2 \\mathrm{ ms} = 8 \\mathrm{ ms}$ (ToF measurements via System B) $T_{\\mathrm{transmit phase}} = 4 \\times 10 \\mathrm{ ms} = 40 \\mathrm{ ms}$ (data transmission via System A) $T_{\\mathrm{compute}} = 5 \\mathrm{ ms}$ (multilateration calculation) Total active cycle time: $$T_{\\mathrm{total}} = 200 + 8 + 40 + 5 = 253 \\mathrm{ ms}$$ Precision clock duty cycle: $$\\mathrm{Duty_{cycle}} = \\frac{T_{\\mathrm{stabilization}} + T_{\\mathrm{measure_{phase}}}}{T_{\\mathrm{total}}} = \\frac{208}{253} = 82%$$ Available time budget:\n$1000 \\mathrm{ ms} - 253 \\mathrm{ ms} = 747 \\mathrm{ ms}$ (safety margin)\nPower Optimization:\nPrecision clocks active: 208 ms per cycle (20.8% of total time) Standard clocks active: 100% of time Significant power savings compared to continuous precision operation 5.6 Communication Bandwidth Requirements (Dual System) System A (Command \u0026 Control):\nPosition measurement commands: 32 bits/command\nAgent status/health: 64 bits/agent/cycle\nDistance measurement results: 104 bits/measurement\nProtocol overhead: ×2-3 typical\nFor 4 agents at 1 Hz: $$\\mathrm{System A_{baud}} = \\frac{(32 + 4 \\times 64 + 4 \\times 104) \\times 3}{1 \\mathrm{ s}} = 2.1 \\mathrm{ kbps}$$ System B (Precision Timing):\nToF signal packets: Minimal data payload Focus on timing precision rather than data throughput Bandwidth: \u003c 100 bps (signal synchronization only) Active only during measurement phases (8 ms per cycle) Total communication overhead: $$\\mathrm{Combined bandwidth} \\approx 2.2 \\mathrm{ kbps (easily achievable)}$$\n5.7 Thermal Management and Clock Stability Precision Clock Thermal Considerations:\nTemperature-Frequency Relationship: $$\\frac{\\Delta f}{f} = \\alpha \\times \\Delta T$$ Where $\\alpha \\approx 10^{-6}/^\\circ C$ for quality crystal oscillators\nThermal Stabilization Requirements:\nTarget temperature stability: ±0.1°C Stabilization time: 100–500 ms (depending on thermal mass) Frequency stability: ±0.1 ppm after stabilization Power Cycling Benefits:\nReduced thermal drift accumulation\nConsistent starting conditions for each measurement\nLower average power consumption\nExtended hardware lifetime\nThermal Stabilization Protocol:\nActivate precision clock and heating element\nMonitor temperature until stable (±0.1°C)\nPerform brief frequency calibration check\nBegin measurement sequence\nPower down after measurement complete","6-error-budget-analysis-dual-system-architecture#6. Error Budget Analysis (Dual System Architecture)":"6.1 Distance Measurement Error Sources Precision Clock Errors: $$\\sigma_{\\mathrm{clock}} = \\frac{\\mathrm{clock_resolution}}{\\sqrt{12}} \\approx 0.29 \\times \\mathrm{clock_resolution}$$ Thermal Stabilization Error: $$\\sigma_{\\mathrm{thermal}} = \\alpha \\times \\Delta T_{\\mathrm{residual}} \\times \\frac{c}{2 \\times f_{\\mathrm{signal}}}$$ For ±0.1°C stability: $$\\sigma_{\\mathrm{thermal}} \\approx 1.5, \\mathrm{cm}$$\nClock Activation Jitter: $$\\sigma_{\\mathrm{activation}} \\approx 100, \\mathrm{ps} \\quad \\mathrm{(typical for precision oscillator startup)}$$ Equivalent to 1.5 cm distance error.\nSignal noise error: $$\\sigma_{\\mathrm{noise}} = \\frac{c}{2 \\times BW \\times \\sqrt{SNR}}$$ Multipath error: $$\\sigma_{\\mathrm{multipath}} \\approx 0.1 \\times \\lambda \\quad \\mathrm{(in urban environments)}$$ Processing delay stability: $$\\sigma_{\\mathrm{processing}} \\approx \\pm 1, \\mathrm{ns} \\quad \\mathrm{(typical for digital systems)}$$ Communication System Timing Uncertainty: $$\\sigma_{\\mathrm{comm}} = \\frac{\\mathrm{standard_clock_resolution}}{\\sqrt{12}}$$ For 100 MHz standard clock: $\\sigma_{\\mathrm{comm}} \\approx 2.9, \\mathrm{ns} \\rightarrow 87, \\mathrm{cm}$\n6.2 Combined Error Analysis (Modified for Dual Architecture) Root Sum Square (RSS) combination: $$\\sigma_{\\mathrm{total}} = \\sqrt{ \\sigma_{\\mathrm{clock}}^2 + \\sigma_{\\mathrm{thermal}}^2 + \\sigma_{\\mathrm{activation}}^2 + \\sigma_{\\mathrm{noise}}^2 + \\sigma_{\\mathrm{multipath}}^2 + \\sigma_{\\mathrm{processing}}^2 }$$ Note: $\\sigma_{\\mathrm{comm}}$ cancels out due to base station timestamp replacement.\nFor 1.4 GHz precision clock, 70 MHz signal, 20 dB SNR:\n$\\sigma_{\\mathrm{clock}} = 0.29 \\times 714, \\mathrm{ps} = 207, \\mathrm{ps} \\rightarrow 6.2, \\mathrm{cm}$ $\\sigma_{\\mathrm{thermal}} \\approx 1.5, \\mathrm{cm}$ $\\sigma_{\\mathrm{activation}} \\approx 1.5, \\mathrm{cm}$ $\\sigma_{\\mathrm{noise}} \\approx 500, \\mathrm{ps} \\rightarrow 7.5, \\mathrm{cm}$ $\\sigma_{\\mathrm{multipath}} \\approx 43, \\mathrm{cm} \\quad (4.3, \\mathrm{m wavelength})$ $\\sigma_{\\mathrm{processing}} \\approx 30, \\mathrm{cm}$ Total distance error: $$\\sigma_{\\mathrm{total}} = \\sqrt{6.2^2 + 1.5^2 + 1.5^2 + 7.5^2 + 43^2 + 30^2} = 53.6, \\mathrm{cm}$$\nImpact of Dual Architecture:\nPositive: Communication timing errors eliminated\nNegative: Additional thermal and activation errors\nNet effect: Marginal increase in total error (~0.2 cm)","7-system-implementation-considerations#7. System Implementation Considerations":"7.1 Hardware Architecture Requirements Agent Hardware Configuration:\nStandard System Clock: 100 MHz (continuous operation)\nPrecision Timing Clock: $\\geq 1.4\\ \\mathrm{GHz}$ (selective activation)\nDual Radio Systems:\nRadio A: Command/control (LoRa, WiFi, etc.)\nRadio B: Precision timing (optimized for ToF)\nThermal Management: Heating elements and temperature sensors\nPower Management: Switchable power domains\nBase Station Configuration:\nStandard System Clock: 100 MHz (continuous operation)\nCommunication Interface: System A only (no precision timing required)\nProcessing Power: Sufficient for real-time multilateration\nData Storage: Logging and analysis capabilities\n7.2 Operational Workflow Typical Measurement Cycle:\nflowchart TD A[\"Base station sends measurement command (System A)\"] B[\"Agents receive command, begin precision clock activation\"] C[\"Thermal stabilization complete, agents ready\"] D[\"Begin ToF measurements (System B)\u003cbr/\u003e4 agents × 2ms each\"] E[\"ToF measurements complete, precision clocks power down\"] F[\"Agents transmit results (System A)\u003cbr/\u003e4 agents × 10ms each\"] G[\"Base station completes multilateration calculation\"] H[\"Position data available, cycle complete\"] I[\"\u003cbr/\u003e• System health monitoring\u003cbr/\u003e• Drift calibration\u003cbr/\u003e• Data logging and analysis\u003cbr/\u003e• External communication\"] A --\u003e B --\u003e C --\u003e D --\u003e E --\u003e F --\u003e G --\u003e H --\u003e I 7.3 Power Consumption Analysis Precision Clock Power Budget:\nActive time per cycle: 218ms (stabilization + measurement)\nDuty cycle: 21.8%\nEstimated power reduction: 60-70% vs. continuous operation\nTotal System Power:\nStandard clocks: 1W continuous\nPrecision clocks: 5W × 0.218 = 1.09W average\nRadio systems: 2W average\nTotal per agent: ~4W average vs. ~8W continuous precision","8-conclusion#8. Conclusion":"The dual communication architecture provides several key advantages for high-precision distance measurement:\nPower Efficiency: reduction in precision clock power consumption through selective activation\nThermal Stability: Consistent thermal conditions for each measurement cycle, reducing drift accumulation\nSystem Robustness: Separation of critical timing operations from general communications\nScalability: Standard communication protocols can handle command/control while precision timing remains optimized\nError Isolation: Communication timing errors eliminated through timestamp replacement","abstract#Abstract":"This document provides a comprehensive overview of the physics, mathematics, and hardware considerations for a time-of-flight (ToF) based distance measurement system designed for GPS-denied multilateration. The system enables multiple agents to determine distances to a rover using radio signal propagation time, accounting for clock precision, hardware constraints, and time synchronization challenges in distributed systems."},"title":"2 - Time-of-Flight Distance Measurement System"},"/research/gps_denied_rover/3_target_occlusion_detection/":{"data":{"":"","combined-detection-algorithms#Combined Detection Algorithms":"Combining geometric and odometry-based detection provides robust occlusion identification with reduced false positive rates.\nFusion Detection Algorithm Step 1: Parallel Detection\nExecute geometric detection algorithm (Section 3) Execute odometry-based detection algorithm (Section 4) Record results for each anchor: $\\mathrm{geo_occluded}_i$: Boolean result from geometric test $\\mathrm{odom_occluded}_i$: Boolean result from odometry test Step 2: Confidence Weighting\nAssign confidence weights based on system conditions: $w_{geo}$: Geometric detection weight (0.7 for good anchor geometry, 0.3 for poor) $w_{odom}$: Odometry detection weight (0.8 for reliable odometry, 0.2 for unreliable) Ensure weights sum to unity: $w_{geo} + w_{odom} = 1.0$ Step 3: Fusion Decision\nCalculate combined occlusion probability for each anchor: $$P(\\mathrm{occluded}i) = w{geo} \\cdot \\mathrm{geo_occluded}i + w{odom} \\cdot \\mathrm{odom_occluded}_i$$ Apply threshold decision: $$\\mathrm{final_occluded}_i = \\begin{cases} \\mathrm{True} \u0026 \\mathrm{if } P(\\mathrm{occluded}_i) \u003e 0.6 \\ \\mathrm{False} \u0026 \\mathrm{otherwise} \\end{cases}$$ Step 4: Consistency Validation\nAgreement cases (both methods agree): High confidence in result Proceed with anchor exclusion/inclusion as indicated Disagreement cases (methods disagree): Lower confidence threshold to 0.4 for conservative approach Implement additional validation checks Consider environmental factors (multipath, terrain complexity) Step 5: System Health Assessment\nMonitor detection system performance: Track false positive rates across operational time Adjust confidence weights based on historical accuracy Flag systematic issues (e.g., consistent odometry failures) Adaptive threshold adjustment: Increase sensitivity in complex terrain Decrease sensitivity in open environments Adjust based on rover speed and mission criticality ","fundamental-principles#Fundamental Principles":"Line-of-Sight (LOS) vs Non-Line-of-Sight (NLOS) Line-of-Sight (LOS) Conditions:\nDirect radio path between anchor and rover ToF measurements represent true geometric distance Signal strength follows predictable path loss models All anchor distance circles/spheres converge at rover position Non-Line-of-Sight (NLOS) Conditions:\nSignal path obstructed by terrain, buildings, or vegetation Signal arrives via reflection, diffraction, or scattering Measured distance typically exceeds true geometric distance Distance circles/spheres fail to converge at common point Geometric Consistency Principle Under LOS conditions, all anchor distance measurements must be geometrically consistent. This means:\nIn 2D: Distance circles from all anchors intersect at the rover’s position In 3D: Distance spheres from all anchors intersect at the rover’s position Any deviation from perfect intersection indicates measurement error or occlusion Triangle Inequality Constraint For any three points (two anchors and rover), the triangle inequality must hold: $$|d_1 - d_2| \\leq d_{12} \\leq d_1 + d_2$$\nWhere:\n$d_1$ = distance from anchor 1 to rover $d_2$ = distance from anchor 2 to rover $d_{12}$ = distance between anchors 1 and 2 Violation of this constraint indicates NLOS conditions.","geometric-occlusion-detection#Geometric Occlusion Detection":"Geometric detection examines whether distance measurements from all anchors are mutually consistent through geometric intersection analysis. The fundamental principle is that under ideal LOS conditions, all distance circles (2D) or spheres (3D) must intersect at exactly one point - the rover’s position. This intersection point represents the multilateration solution where the number of intersecting geometric shapes equals the number of anchors.\n2D Geometric Detection Algorithm Step 1: Initialize Parameters\nSet geometric tolerance: $\\epsilon_{geo}$ (sample accuracy constraint set to 0.1m) Collect anchor positions: $(x_i, y_i)$ for $i = 1, 2, …, n$ anchors Collect ToF distance measurements: $r_i$ for each anchor $i$ Step 2: Generate Distance Circles\nFor each anchor $i$ at position $(x_i, y_i)$ with measured distance $r_i$: $$\\mathrm{Circle}_i: (x - x_i)^2 + (y - y_i)^2 = r_i^2$$ Step 3: Calculate Pairwise Circle Intersections\nFor each pair of anchors $(i, j)$ where $i \u003c j$: Calculate center separation distance: $$d_{ij} = \\sqrt{(x_j - x_i)^2 + (y_j - y_i)^2}$$ Check intersection feasibility: If $d_{ij} \u003e r_i + r_j + \\epsilon_{geo}$: Circles too far apart (no intersection) If $d_{ij} \u003c |r_i - r_j| - \\epsilon_{geo}$: One circle inside the other (no intersection) If $d_{ij} = 0$ and $r_i = r_j$: Identical circles (infinite intersections) If intersection exists, calculate intersection points: $$a = \\frac{r_i^2 - r_j^2 + d_{ij}^2}{2d_{ij}}$$ $$h = \\sqrt{\\max(r_i^2 - a^2, 0)}$$ $$x_m = x_i + a \\cdot \\frac{x_j - x_i}{d_{ij}}$$ $$y_m = y_i + a \\cdot \\frac{y_j - y_i}{d_{ij}}$$ $$x_{int1} = x_m + h \\cdot \\frac{y_j - y_i}{d_{ij}}$$ $$y_{int1} = y_m - h \\cdot \\frac{x_j - x_i}{d_{ij}}$$ $$x_{int2} = x_m - h \\cdot \\frac{y_j - y_i}{d_{ij}}$$ $$y_{int2} = y_m + h \\cdot \\frac{x_j - x_i}{d_{ij}}$$ Step 4: Identify Rover Position Through Maximum Intersection Analysis\nCollect all intersection points from Step 3 into set $P = {p_1, p_2, …, p_m}$ For each candidate point $p_k = (x_k, y_k)$, determine how many circles intersect at this location Calculate distance from candidate to each anchor: $$d_{k,i} = \\sqrt{(x_k - x_i)^2 + (y_k - y_i)^2}$$ Count intersecting circles at each candidate point: $$\\mathrm{intersection_count}k = \\sum{i=1}^{n} \\begin{cases} 1 \u0026 \\mathrm{if } |d_{k,i} - r_i| \\leq \\epsilon_{geo} \\ 0 \u0026 \\mathrm{otherwise} \\end{cases}$$ Rover Position Identification: The point with maximum intersection count represents the rover’s multilateration solution: $$\\mathrm{rover_position} = \\arg\\max_k(\\mathrm{intersection_count}_k)$$ Step 5: Occlusion Detection Through Intersection Analysis\nFind maximum intersection count: $\\mathrm{count}_{max} = \\max_k(\\mathrm{intersection_count}_k)$ Case 1: No Occlusion Detected If $\\mathrm{count}_{max} = n$: All $n$ circles intersect at the rover position This indicates perfect geometric consistency with all anchors in LOS Rover position is precisely determined through multilateration Case 2: Single Anchor Occlusion If $\\mathrm{count}_{max} = n-1$: Only $n-1$ circles intersect at the rover position One anchor is geometrically inconsistent, indicating occlusion System can still determine position using $n-1$ valid anchors Proceed to Step 6 for occluded anchor identification Case 3: Multiple Anchor Occlusions If $\\mathrm{count}_{max} \u003c n-1$: Fewer than $n-1$ circles intersect at any point Multiple anchors are occluded, severely compromising multilateration Example: With 4 anchors, if only 2 circles intersect at maximum, then 2+ anchors are occluded Proceed to Step 7 for comprehensive occlusion analysis Step 6: Single Occlusion Identification\nIdentify the rover position from Step 5 (point with $\\mathrm{count}_{max} = n-1$ intersections) For each anchor $i$, calculate distance from rover position to anchor: $$d_{rover,i} = \\sqrt{(x_{rover} - x_i)^2 + (y_{rover} - y_i)^2}$$ Compare with measured ToF distance: $$\\mathrm{error}i = |d{rover,i} - r_i|$$ The anchor with $\\mathrm{error}i \u003e \\epsilon{geo}$ is the occluded anchor Multilateration Solution: Use remaining $n-1$ consistent anchors for final position estimate Step 7: Multiple Occlusion Analysis\nSince no point has sufficient circle intersections ($\\mathrm{count}_{max} \u003c n-1$), systematically test anchor combinations: Test exclusion of 2 anchors: $\\binom{n}{2}$ combinations For each combination, use remaining $n-2$ anchors Check if remaining circles achieve intersection count = $n-2$ Continue with larger exclusion sets if necessary: Test exclusion of 3 anchors: $\\binom{n}{3}$ combinations Ensure minimum positioning requirements maintained (≥3 anchors for 2D, ≥4 for 3D ) Selection Criteria: Choose combination that: Achieves maximum intersection count equal to number of remaining anchors Retains maximum number of anchors for robust multilateration Maintains positioning accuracy requirements 3D Geometric Detection Algorithm Step 1: Initialize Parameters\nSet geometric tolerance: $\\epsilon_{geo}$ (recommended: 0.1 m) Collect anchor positions: $(x_i, y_i, z_i)$ for $i = 1, 2, …, n$ anchors Collect ToF distance measurements: $r_i$ for each anchor $i$ Step 2: Generate Distance Spheres\nFor each anchor $i$ at position $(x_i, y_i, z_i)$ with measured distance $r_i$: $$\\mathrm{Sphere}_i: (x - x_i)^2 + (y - y_i)^2 + (z - z_i)^2 = r_i^2$$ Step 3: Calculate Sphere-Sphere Intersections\nFor each pair of anchors $(i, j)$ where $i \u003c j$: Calculate center separation distance: $$d_{ij} = \\sqrt{(x_j - x_i)^2 + (y_j - y_i)^2 + (z_j - z_i)^2}$$ Check intersection feasibility: If $d_{ij} \u003e r_i + r_j + \\epsilon_{geo}$: Spheres don’t intersect If $d_{ij} \u003c |r_i - r_j| - \\epsilon_{geo}$: One sphere inside the other If $d_{ij} = 0$: Spheres are concentric If intersection exists, calculate intersection circle parameters: $$a = \\frac{r_i^2 - r_j^2 + d_{ij}^2}{2d_{ij}}$$ $$h = \\sqrt{\\max(r_i^2 - a^2, 0)}$$ Find intersection circle center: $$\\mathbf{p}_{ij} = \\mathbf{c}_i + a \\cdot \\frac{\\mathbf{c}_j - \\mathbf{c}i}{d{ij}}$$ Where $\\mathbf{c}_i = (x_i, y_i, z_i)$ and $\\mathbf{c}_j = (x_j, y_j, z_j)$ Define intersection circle: Center: $\\mathbf{p}_{ij}$ Normal vector: $\\mathbf{n}_{ij} = \\frac{\\mathbf{c}_j - \\mathbf{c}i}{d{ij}}$ Radius: $h$ Step 4: Multilateration Solution Through Sphere Intersection (see multilateration)\nConvert sphere intersections to overdetermined system $\\mathbf{A}\\mathbf{x} = \\mathbf{b}$: $$\\mathbf{A} = \\begin{bmatrix} n_{1x} \u0026 n_{1y} \u0026 n_{1z} \\ n_{2x} \u0026 n_{2y} \u0026 n_{2z} \\ \\vdots \u0026 \\vdots \u0026 \\vdots \\ n_{mx} \u0026 n_{my} \u0026 n_{mz} \\end{bmatrix}, \\quad \\mathbf{b} = \\begin{bmatrix} \\mathbf{n_1} \\cdot \\mathbf{p_1} \\ \\mathbf{n_2} \\cdot \\mathbf{p_2} \\ \\vdots \\ \\mathbf{n_m} \\cdot \\mathbf{p_m} \\end{bmatrix}$$ Solve for rover position using least squares: $$\\mathbf{x}_{rover} = (\\mathbf{A}^T \\mathbf{A})^{-1} \\mathbf{A}^T \\mathbf{b}$$ Step 5: Sphere Intersection Validation and Occlusion Detection\nFor the calculated rover position, determine how many spheres intersect at this point Calculate distance error for each sphere: $$\\mathrm{error}i = \\left| \\sqrt{(x{\\mathrm{rover}} - x_i)^2 + (y_{\\mathrm{rover}} - y_i)^2 + (z_{\\mathrm{rover}} - z_i)^2} - r_i \\right|$$ Count spheres intersecting at rover position: $$\\mathrm{intersection_count} = \\sum_{i=1}^{n} \\begin{cases} 1 \u0026 \\mathrm{if} ; \\mathrm{error}i \\leq \\epsilon{\\mathrm{geo}} \\ 0 \u0026 \\mathrm{otherwise} \\end{cases}$$ Step 6: 3D Occlusion Classification\nCase 1: No Occlusion If $\\mathrm{intersection_count} = n$: All $n$ spheres intersect at rover position Perfect multilateration solution with all anchors in LOS Case 2: Single Occlusion If $\\mathrm{intersection_count} = n-1$: One sphere doesn’t intersect at rover position Single anchor occlusion detected Proceed to Step 7 for identification Case 3: Multiple Occlusions If $\\mathrm{intersection_count} \u003c n-1$: Multiple spheres fail to intersect Example: With 4 anchors, if only 2 spheres intersect, then 2+ anchors are occluded Proceed to Step 8 for comprehensive analysis Step 7: Single Occlusion Identification (3D)\nThe rover position from Step 4 represents the multilateration solution using $n-1$ valid anchors Identify occluded anchor as the one with $\\mathrm{error}i \u003e \\epsilon{geo}$ Verify occlusion by re-solving multilateration without the suspected anchor: Exclude anchor with highest error Recalculate position using remaining $n-1$ anchors Confirm improved geometric consistency Step 8: Multiple Occlusion Analysis (3D)\nSince fewer than $n-1$ spheres intersect at the rover position, systematically exclude anchors: Rank anchors by error magnitude: $\\mathrm{error}_1 \\geq \\mathrm{error}_2 \\geq … \\geq \\mathrm{error}_n$ Exclude highest-error anchors iteratively For each exclusion combination: Re-solve multilateration with remaining anchors Check if intersection count equals number of remaining anchors Selection Criteria: Choose configuration where: Intersection count = number of remaining anchors (perfect multilateration) Maintains ≥4 anchors (minimum for 3D positioning) Maximizes number of valid anchors for positioning robustness ","implementation-guidelines#Implementation Guidelines":"Real-Time Performance Requirements Computational Complexity:\n2D Geometric Detection: $O(n^2)$ for $n$ anchors 3D Geometric Detection: $O(n^3)$ for least-squares solution Odometry Detection: $O(n)$ for $n$ anchors Combined Detection: $O(n^3)$ dominated by geometric component Timing Budget Allocation:\nMaximum allowable detection time: 10% of measurement cycle For 1 Hz position updates: ≤100 ms detection time Recommended: \u003c50 ms for real-time responsiveness Anchor Configuration Optimization Geometric Dilution of Precision (GDOP) Considerations:\nOptimal anchor spacing: Avoid clustering anchors Altitude diversity: In 3D systems, vary anchor heights Redundancy planning: Deploy \u003eminimum required anchors when possible Dynamic repositioning: Move anchors when persistent occlusion detected System Integration Interface with Multilateration System:\nProvide binary occlusion flags for each anchor Supply confidence levels for decision weighting Maintain anchor exclusion/inclusion lists Update position calculations in real-time Interface with ToF System:\nAccess raw distance measurements and timestamps Monitor measurement quality indicators Coordinate timing with precision clock systems Handle communication system synchronization Interface with Navigation System:\nReceive odometry data streams Synchronize timing across subsystems Validate motion consistency Provide occlusion status for path planning Validation and Testing Simulation Testing:\nSynthetic occlusion scenarios: Test known occlusion patterns Noise injection: Validate robustness to measurement errors Edge case analysis: Test minimum anchor configurations Performance benchmarking: Verify real-time requirements Field Testing:\nControlled occlusion tests: Use artificial obstacles Natural terrain validation: Test in target environments Multi-scenario testing: Validate across different operational conditions Long-duration reliability: Test system stability over extended operations Performance Metrics:\nDetection accuracy: True positive and false positive rates Response time: Time from occlusion onset to detection System availability: Percentage of time with valid position estimates Mission success rate: Overall navigation performance with occlusion handling This comprehensive framework provides the mathematical foundation and algorithmic structure needed to implement robust target occlusion detection in GPS-denied rover systems. The combination of geometric and odometry-based approaches ensures reliable performance across diverse operational environments while maintaining real-time processing requirements.","introduction#Introduction":"Target occlusion occurs when terrain features, buildings, or other obstructions interfere with direct line-of-sight (LOS) communication between drone anchors and a GPS-denied rover. This interference corrupts Time-of-Flight (ToF) distance measurements (see ToF), making accurate multilateration impossible (see multilateration). This document provides comprehensive methods for detecting occlusion without relying on visual sensors.\nProblem Statement In a GPS-denied environment, a rover relies on multiple drone anchors (minimum 4 for 3D positioning) to determine its location through multilateration. When one or more anchors become occluded:\nToF measurements become invalid due to Non-Line-of-Sight (NLOS) conditions Distance measurements may be too long (signal reflection/diffraction) or unavailable Multilateration calculations produce incorrect or unstable position estimates System accuracy degrades below acceptable thresholds Detection Requirements Target occlusion detection must:\nIdentify which specific anchors are occluded Distinguish between single and multiple occlusions Operate without visual confirmation Provide results within the system’s measurement cycle timing Maintain computational efficiency for real-time operation ","mathematical-foundations#Mathematical Foundations":"Geometric Convergence Theory For $n$ anchors in perfect LOS conditions, the geometric intersection should satisfy:\n2D Case: $$\\max_{i,j} \\left| \\sqrt{(x_{convergence} - x_i)^2 + (y_{convergence} - y_i)^2} - r_i \\right| \\leq \\epsilon_{geo}$$\n3D Case: $$\\max_{i} \\left| \\sqrt{(x_{convergence} - x_i)^2 + (y_{convergence} - y_i)^2 + (z_{convergence} - z_i)^2} - r_i \\right| \\leq \\epsilon_{geo}$$\nError Propagation in Occlusion Detection Geometric Detection Error Sources:\nToF measurement uncertainty: $\\sigma_{ToF}$ (see ToF documentation) Anchor position uncertainty: $\\sigma_{anchor}$ Intersection calculation precision: $\\sigma_{calc}$ Combined geometric error: $$\\sigma_{geo} = \\sqrt{\\sigma_{ToF}^2 + \\sigma_{anchor}^2 + \\sigma_{calc}^2}$$\nOdometry Detection Error Sources:\nWheel encoder uncertainty: $\\sigma_{wheel}$ Accelerometer uncertainty: $\\sigma_{accel}$ Time synchronization error: $\\sigma_{time}$ Combined odometry error: $$\\sigma_{odom} = \\sqrt{\\sigma_{wheel}^2 + \\sigma_{accel}^2 + (v \\cdot \\sigma_{time})^2}$$\nStatistical Detection Thresholds False Positive Rate Minimization: $$\\epsilon_{geo} = k_1 \\cdot \\sigma_{geo}$$ $$\\epsilon_{odom} = k_2 \\cdot \\sigma_{odom}$$\nWhere $k_1, k_2$ are chosen based on desired false positive rate:\n$k = 2$: ~5% false positive rate $k = 3$: ~0.3% false positive rate $k = 4$: ~0.006% false positive rate ","odometry-based-occlusion-detection#Odometry-Based Occlusion Detection":"Odometry-based detection uses the rover’s motion constraints to validate distance changes between consecutive measurements.\nTheoretical Foundation The triangle inequality provides a fundamental constraint: if a rover moves distance $L$, the range to any anchor cannot change by more than $L$ under LOS conditions.\nMathematical Constraint: $$|\\Delta r_i| \\leq L + \\epsilon_{odom}$$\nWhere:\n$\\Delta r_i = r_{i,new} - r_{i,old}$ (change in range to anchor $i$) $L$ = rover displacement magnitude $\\epsilon_{odom}$ = odometry tolerance (accounts for measurement uncertainty) Odometry-Based Detection Algorithm Step 1: Initialize Odometry System\nSet odometry tolerance: $\\epsilon_{odom}$ (sample accuracy constraint set to 0.05 m) Initialize rover position tracking system Identify offsets in timestamps between odometry system, ToF systems (see ToF), and base station / Parent Drone Step 2: Collect Motion Data\nRecord rover displacement vector from odometry: Wheel encoders: $(\\Delta x_{wheel}, \\Delta y_{wheel})$ Accelerometer: $(\\Delta x_{accel}, \\Delta y_{accel}, \\Delta z_{accel})$ Time interval: $\\Delta t$ Calculate displacement magnitude: $$L = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}$$ Step 3: Validate Odometry Consistency\nCross-check wheel encoders vs accelerometer: If wheel movement detected but no acceleration: rover likely stuck If acceleration detected but no wheel movement: rover likely slipped/fell Flag inconsistent odometry for further analysis Speed reasonableness check: $$v_{apparent} = \\frac{L}{\\Delta t}$$ If $v_{apparent}$ exceeds maximum rover capability: flag as error Step 4: Calculate Range Changes\nFor each anchor $i$, compute range difference: $$\\Delta r_i = r_{i,new} - r_{i,old}$$ Apply triangle inequality test: $$\\mathrm{violation}i = \\begin{cases} \\mathrm{True} \u0026 \\mathrm{if } |\\Delta r_i| \u003e L + \\epsilon{odom} \\ \\mathrm{False} \u0026 \\mathrm{otherwise} \\end{cases}$$ Step 5: Enhanced Geometric Validation (Optional)\nIf rover heading $\\theta$ and anchor bearing $\\phi_i$ are known, use law of cosines: $$r_{i,expected} = \\sqrt{r_{i,old}^2 + L^2 - 2 \\cdot r_{i,old} \\cdot L \\cdot \\cos(\\phi_i - \\theta)}$$ Compare with measured value: $$\\mathrm{error}i = |r{i,new} - r_{i,expected}|$$ Flag if $\\mathrm{error}i \u003e \\epsilon{odom}$ Step 6: Identify Occluded Anchors\nSingle Violation: If only one anchor violates triangle inequality: likely occluded Confidence level: High (assuming odometry is reliable) Multiple Violations: Check odometry reliability (Step 3 validation) If odometry is reliable: multiple occlusions likely If odometry is unreliable: suspend occlusion detection until odometry recovers No Violations: All anchors consistent with motion High confidence in LOS conditions Step 7: Temporal Filtering\nApply temporal smoothing to reduce false positives: Maintain sliding window of last $N$ measurements (recommended: $N = 5$) Require violation persistence across multiple time steps Use majority vote across temporal window Occlusion confirmation criteria: Anchor must violate triangle inequality in ≥60% of recent measurements Violation magnitude must exceed $2 \\times \\epsilon_{odom}$ for high confidence ","table-of-contents#Table of Contents":" Introduction Fundamental Principles Geometric Occlusion Detection Odometry-Based Occlusion Detection Combined Detection Algorithms Mathematical Foundations Implementation Guidelines "},"title":"3 - Target Occlusion Detection for GPS-Denied Rover Systems"},"/research/gps_denied_rover/4_gps_denial_detection/":{"data":{"1-overview#1. Overview":"1.1 System Architecture The GPS denial detection system operates as a parallel monitoring subsystem that continuously evaluates GPS signal health while the rover conducts land surveys. Detection operates at 1 Hz with sub-second response times to ensure minimal positioning downtime during GPS outages.\nPrimary Detection Categories:\nSignal Quality Metrics Data Integrity Monitoring Position/Velocity Consistency Checks Cross-Sensor Validation RTK-Specific Indicators (when applicable) 1.2 Detection Requirements Target Specifications:\nDetection Latency: ≤ 1 second Position Update Rate: 1 Hz Volume Accuracy Constraint: 10 cm³ (when operating) False Positive Rate: \u003c 1% Operating Environments: All-terrain outdoor land survey ","10-hardware-requirements#10. Hardware Requirements":"10.1 GPS Receiver Specifications Minimum Receiver Capabilities:\nMulti-constellation support (GPS, GLONASS, Galileo, BeiDou) Raw measurement output (C/N₀, AGC, satellite ephemeris) NMEA and binary protocol support Update rate: ≥ 1 Hz Cold start TTFF: \u003c 30 seconds Hot start TTFF: \u003c 5 seconds RTK-Specific Requirements:\nDual-frequency capability (L1/L2 or L1/L5) Carrier phase measurement output RTCM correction input capability Centimeter-level accuracy when corrections available Cycle slip detection and reporting 10.2 Integration Hardware Sensor Fusion Capabilities:\nInertial Measurement Unit (IMU): 6-DOF minimum, 9-DOF preferred Wheel encoder interfaces: Quadrature decoder capability Communication interfaces: UART, SPI, CAN bus support Processing capability: Real-time filtering and state estimation Environmental Considerations:\nOperating temperature: -40°C to +85°C Vibration resistance: Military standard compliance Moisture protection: IP67 rating minimum Electromagnetic compatibility: FCC Part 15 compliance ","11-calibration-requirements#11. Calibration Requirements":"11.1 Baseline Calibration Environmental Baseline Establishment:\nEach operating environment requires baseline measurements for adaptive threshold setting.\nCalibration Procedure:\nDeploy rover in target environment for extended period (≥ 4 hours) Record all GPS quality metrics under known good conditions Calculate statistical distributions (mean, standard deviation) Establish detection thresholds at 2-3 sigma confidence levels Validate false positive rates through extended testing 11.2 Cross-Sensor Calibration INS/GPS Alignment:\nStatic alignment: 15-minute stationary initialization Dynamic alignment: Figure-8 maneuvers for accelerometer/gyroscope calibration Magnetic calibration: 360° rotation in multiple planes Wheel Odometry Calibration:\nKnown distance travel test (minimum 100 meters) Surface-specific calibration for different terrain types Slip factor determination for various ground conditions ","12-performance-validation#12. Performance Validation":"12.1 Detection Performance Metrics Key Performance Indicators:\nDetection Latency: Mean time from GPS denial to detection False Positive Rate: Incorrect denial detections per operating hour False Negative Rate: Missed denial events per operating hour Availability: Percentage of time position solution is available Target Performance Standards:\nDetection Latency: \u003c 2 seconds (95th percentile) False Positive Rate: \u003c 0.1% per hour False Negative Rate: \u003c 0.01% per hour System Availability: \u003e 99.9% 12.2 Test Scenarios Controlled Jamming Tests:\nProgressive signal degradation simulation Selective frequency jamming Broadband noise injection Spoofing attack simulation Environmental Stress Tests:\nRapid environment transitions (open field to forest) Extended operation in challenging environments Temperature cycling and vibration testing Long-duration reliability assessment ","13-implementation-considerations#13. Implementation Considerations":"13.1 Computational Requirements Processing Load:\nReal-time filtering: \u003c 10% CPU utilization Multi-indicator fusion: \u003c 5% CPU utilization State machine management: \u003c 1% CPU utilization Data logging: \u003c 2% CPU utilization Memory Requirements:\nHistorical data buffer: 100 MB (1 hour at 1 Hz) Calibration parameters: 10 MB per environment Algorithm workspace: 50 MB Total system memory: 512 MB recommended 13.2 Integration Guidelines Software Architecture:\nModular design with replaceable components Standard interfaces for sensor integration Configurable parameters for different platforms Comprehensive logging and diagnostic capabilities Real-time Constraints:\nHard deadline: 1-second detection latency Soft deadline: 100ms for individual indicator calculations Interrupt priority: GPS monitoring at high priority level Thread management: Separate threads for each major function ","2-signal-quality-indicators#2. Signal Quality Indicators":"2.1 Satellite Lock Monitoring Lock Loss/Reacquisition Detection:\nThe system monitors GPS receiver lock status through continuous evaluation of fix quality flags and satellite tracking behavior.\nKey Indicators:\nFix quality degradation (3D → 2D → No Fix) Frequent lock loss and reacquisition cycles LED status indicators showing intermittent operation Time-to-first-fix (TTFF) degradation Detection Algorithm:\nPSEUDOCODE: Lock Status Monitoring WHILE system_active: current_fix_status = get_gps_fix_quality() IF current_fix_status \u003c previous_fix_status: lock_degradation_count += 1 IF lock_degradation_count \u003e THRESHOLD_DEGRADATION: trigger_gps_denial_flag() IF fix_reacquisition_time \u003e THRESHOLD_REACQ_TIME: trigger_gps_denial_flag() Thresholds:\nLock degradation events: \u003e 3 in 10 seconds Reacquisition time: \u003e 30 seconds (cold start) Reacquisition time: \u003e 5 seconds (warm start) 2.2 Satellite Count Monitoring Satellite Visibility Analysis:\nSudden drops in tracked satellites indicate potential jamming or signal denial, particularly when environmental conditions remain constant.\nMathematical Relationship:\nFor GPS accuracy requirements within 10 cm³ volume:\nPosition Dilution of Precision (PDOP): PDOP = √(σx² + σy² + σz²) / σr Where: - σr = user equivalent range error - Minimum satellites for 3D positioning: 4 - Recommended satellites for high accuracy: ≥ 6 Detection Parameters:\nNormal satellite count: 8-12 satellites (open sky) Warning threshold: \u003c 6 satellites Critical threshold: \u003c 4 satellites Rate of change: \u003e 50% drop in \u003c 5 seconds 2.3 Signal Strength Analysis Carrier-to-Noise Ratio (C/N₀) Monitoring:\nSignal strength degradation across all channels simultaneously indicates broadband jamming rather than selective fading.\nNormal Operating Values:\nOpen field: 40-50 dB-Hz Light foliage: 35-45 dB-Hz Urban canyons: 25-40 dB-Hz Heavy foliage: 20-35 dB-Hz Jamming Detection Thresholds:\nC/N₀ Analysis: IF all_channels_C/N₀ \u003c (baseline_C/N₀ - 10 dB): potential_jamming = TRUE IF C/N₀_drop_rate \u003e 5 dB/second: active_jamming = TRUE Automatic Gain Control (AGC) Monitoring:\nAGC voltage increases indicate receiver attempts to compensate for elevated noise floor from jamming.\nAGC Voltage Analysis: normal_AGC_range = [1.8V, 2.5V] jamming_threshold = 3.0V IF AGC_voltage \u003e jamming_threshold: jamming_detected = TRUE ","3-data-integrity-monitoring#3. Data Integrity Monitoring":"3.1 Message Corruption Detection NMEA/UBX Checksum Validation:\nCorrupted GPS messages indicate signal interference affecting data integrity.\nMonitoring Parameters:\nChecksum failure rate: \u003e 5% indicates interference Truncated sentence rate: \u003e 2% indicates signal disruption Parity error frequency: \u003e 1% indicates data corruption 3.2 Receiver Autonomous Integrity Monitoring (RAIM) RAIM Algorithm Implementation:\nRAIM detects inconsistencies in satellite measurements that could indicate jamming or spoofing.\nMathematical Foundation:\nRAIM Test Statistic: T = (r - H*x)ᵀ * W * (r - H*x) Where: - r = pseudorange measurements - H = observation matrix - x = position/time solution - W = weighting matrix Threshold Comparison: IF T \u003e χ²(α, df): integrity_failure = TRUE Detection Thresholds:\nHorizontal Alert Limit (HAL): 10 meters Vertical Alert Limit (VAL): 15 meters Time to Alert: \u003c 1 second ","4-position-and-velocity-consistency#4. Position and Velocity Consistency":"4.1 Position Jump Detection Unrealistic Movement Analysis:\nThe system monitors for sudden position changes that exceed physical rover capabilities.\nDetection Algorithm:\nPosition Jump Detection: max_rover_acceleration = 2.0 m/s² # Conservative estimate time_interval = 1.0 s # Update rate expected_max_displacement = 0.5 * max_rover_acceleration * time_interval² position_jump = √((x₂-x₁)² + (y₂-y₁)² + (z₂-z₁)²) IF position_jump \u003e (expected_max_displacement * safety_factor): position_anomaly = TRUE Safety Factors by Environment:\nOpen field: 2.0 Urban canyon: 3.0 Forest canopy: 4.0 Mountainous terrain: 5.0 4.2 Velocity Validation Speed and Heading Consistency:\nCross-validation between GPS-derived velocity and rover’s physical capabilities.\nVelocity Consistency Check: max_rover_speed = 10 m/s # Surveying rover typical maximum IF gps_velocity \u003e max_rover_speed: velocity_anomaly = TRUE IF abs(gps_heading_change) \u003e max_angular_velocity * time_interval: heading_anomaly = TRUE ","5-rtk-specific-indicators#5. RTK-Specific Indicators":"5.1 RTK Fix Status Monitoring Fix Quality Degradation:\nRTK systems provide centimeter-level accuracy but are sensitive to signal interference.\nStatus Hierarchy:\nRTK-FIX: Centimeter accuracy (target state) RTK-FLOAT: Decimeter accuracy (degraded) DGPS: Meter accuracy (significantly degraded) Single Point: Multi-meter accuracy (unacceptable) Detection Logic:\nRTK Status Monitoring: acceptable_states = [RTK_FIX, RTK_FLOAT] current_rtk_status = get_rtk_status() IF current_rtk_status NOT IN acceptable_states: rtk_degradation_time += time_interval IF rtk_degradation_time \u003e RTK_TIMEOUT_THRESHOLD: trigger_aps_transition() 5.2 Carrier-Phase Cycle Slip Detection Phase Continuity Monitoring:\nCycle slips indicate loss of carrier phase lock critical for RTK positioning.\nMathematical Detection:\nCycle Slip Detection: phase_difference = current_phase - predicted_phase cycle_slip_threshold = 0.5 cycles # λ/2 IF abs(phase_difference) \u003e cycle_slip_threshold: cycle_slip_detected = TRUE simultaneous_slips = count_satellites_with_slips() IF simultaneous_slips \u003e 2: interference_likely = TRUE ","6-cross-sensor-validation#6. Cross-Sensor Validation":"6.1 INS/GPS Comparison Inertial Navigation Cross-Check:\nComparison between GPS position updates and inertial navigation predictions.\nInnovation Analysis:\nInnovation Vector Calculation: innovation = gps_position - predicted_position_from_ins innovation_magnitude = ||innovation|| statistical_threshold = 3 * σ_expected # 3-sigma test IF innovation_magnitude \u003e statistical_threshold: gps_ins_inconsistency = TRUE Expected Accuracy Standards:\nINS drift rate: \u003c 1 m/hour (tactical grade) GPS accuracy: \u003c 3 m (95% confidence) Combined uncertainty: √(σ²ᵢₙₛ + σ²ᵍᵖˢ) 6.2 Wheel Odometry Integration Dead Reckoning Validation:\nEncoder-based distance measurements provide independent motion validation.\nOdometry Cross-Check: distance_traveled_gps = ||position_current - position_previous|| distance_traveled_wheels = wheel_encoder_distance distance_discrepancy = abs(distance_traveled_gps - distance_traveled_wheels) discrepancy_threshold = 0.1 * distance_traveled_wheels # 10% tolerance IF distance_discrepancy \u003e discrepancy_threshold: odometry_gps_mismatch = TRUE ","7-environmental-considerations#7. Environmental Considerations":"7.1 Environment-Specific Detection Parameters Open Field Environments:\nExpected satellite count: 10-12 Expected C/N₀: 45-50 dB-Hz Multipath error: \u003c 0.5 m Detection sensitivity: High (low false positive tolerance) Forest Canopy:\nExpected satellite count: 4-8 Expected C/N₀: 25-40 dB-Hz Multipath error: 1-3 m Detection sensitivity: Medium (higher tolerance for natural degradation) Urban Canyons:\nExpected satellite count: 3-6 Expected C/N₀: 20-35 dB-Hz Multipath error: 2-10 m Detection sensitivity: Low (high tolerance for reflections) Mountainous Terrain:\nExpected satellite count: 4-9 (topography dependent) Expected C/N₀: 30-45 dB-Hz Multipath error: 0.5-2 m Detection sensitivity: Medium (variable based on terrain masking) 7.2 Adaptive Threshold Management Dynamic Threshold Adjustment:\nDetection thresholds adapt based on environmental classification and historical performance data.\nAdaptive Threshold Algorithm: baseline_threshold = get_environment_baseline(current_environment) recent_performance = calculate_recent_gps_quality() noise_floor_estimate = estimate_current_noise_floor() adjusted_threshold = baseline_threshold * (1 + adaptation_factor) Where adaptation_factor considers: - Recent GPS quality trends - Environmental noise estimates - Time of day effects (ionospheric activity) - Seasonal variations ","8-detection-state-machine#8. Detection State Machine":"8.1 System States stateDiagram-v2 [*] --\u003e GPS_HEALTHY GPS_HEALTHY --\u003e GPS_DEGRADED : Quality metrics below threshold GPS_HEALTHY --\u003e GPS_SUSPICIOUS : Single indicator triggered GPS_SUSPICIOUS --\u003e GPS_HEALTHY : Indicators return to normal GPS_SUSPICIOUS --\u003e GPS_DEGRADED : Multiple indicators persist GPS_SUSPICIOUS --\u003e GPS_DENIED : Critical indicators triggered GPS_DEGRADED --\u003e GPS_HEALTHY : Quality metrics recovered GPS_DEGRADED --\u003e GPS_DENIED : Continued degradation GPS_DEGRADED --\u003e GPS_SUSPICIOUS : Partial recovery GPS_DENIED --\u003e APS_TRANSITION : Trigger alternative positioning GPS_DENIED --\u003e GPS_DEGRADED : Partial GPS recovery detected APS_TRANSITION --\u003e [*] : Switch to UWB multilateration 8.2 State Transition Logic GPS_HEALTHY State:\nAll indicators within normal parameters Position accuracy meeting 10 cm³ constraint Full satellite constellation visible Signal strength nominal for environment GPS_SUSPICIOUS State:\nSingle quality indicator triggered Temporary degradation possible Enhanced monitoring active Prepare for potential APS transition GPS_DEGRADED State:\nMultiple quality indicators below threshold Position accuracy degraded but still functional Increased monitoring frequency APS standby activation GPS_DENIED State:\nCritical indicators triggered Position accuracy unacceptable Immediate APS transition required GPS monitoring continues for recovery detection ","9-detection-algorithm-integration#9. Detection Algorithm Integration":"9.1 Multi-Indicator Fusion Weighted Decision Algorithm:\nIndividual indicators contribute to an overall GPS health score with environment-specific weightings.\nGPS Health Score Calculation: health_score = Σ(wᵢ × indicatorᵢ) Where indicators include: - Satellite count (w₁ = 0.2) - Signal strength (w₂ = 0.25) - Position consistency (w₃ = 0.3) - Data integrity (w₄ = 0.15) - Cross-sensor validation (w₅ = 0.1) Decision Thresholds: health_score \u003e 0.8: GPS_HEALTHY 0.5 \u003c health_score ≤ 0.8: GPS_DEGRADED 0.3 \u003c health_score ≤ 0.5: GPS_SUSPICIOUS health_score ≤ 0.3: GPS_DENIED 9.2 Temporal Filtering Detection Persistence Requirements:\nPrevents false positives from temporary signal variations while maintaining rapid response to genuine threats.\nTemporal Filter Implementation: detection_counter = 0 confirmation_threshold = 3 # Require 3 consecutive detections FOR each 1Hz update cycle: current_health = calculate_gps_health() IF current_health indicates_denial: detection_counter += 1 ELSE: detection_counter = max(0, detection_counter - 1) IF detection_counter \u003e= confirmation_threshold: confirm_gps_denial() initiate_aps_transition() ","abstract#Abstract":"This document provides comprehensive technical guidance for detecting GPS denial and jamming in autonomous rover systems operating in diverse environments. The detection system monitors multiple indicators across signal quality, integrity, and cross-sensor validation to enable rapid transition to Alternative Positioning Systems (APS) when GPS becomes unreliable.","gps-denial-detection#GPS Denial Detection":"GPS Denial Detection"},"title":"4 - GPS Denial Detection"},"/research/gps_denied_rover/5_aps_triggering/":{"data":{"1-system-overview#1. System Overview":"1.1 Operational Context The rover operates in a dual-positioning architecture where GPS and ToF-based positioning systems run in parallel. During normal operations, GPS provides primary positioning while the APS remains in standby mode. Upon detection of GPS denial or degradation, the system transitions to APS mode to maintain continuous positioning capability.\nPrimary Use Case: Land surveying operations in diverse outdoor environments including:\nUrban canyons with multipath interference Dense forest canopies Mountain valleys and terrain Open fields with potential jamming Industrial areas with RF interference 1.2 APS Components UWB-Based Multilateration System:\nMultiple drone agents providing reference points Time-of-Flight distance measurements Real-time position calculation 10 cm³ volume accuracy target System Architecture:\nCommunication System A: Command \u0026 control (Base station ↔ Drones) Communication System B: Precision timing (Drones ↔ Rover) Dual clock architecture (Standard + Precision timing) ","10-system-integration-and-operational-procedures#10. System Integration and Operational Procedures":"10.1 Pre-Mission Setup System Verification Checklist:\nGPS receiver functionality and satellite visibility Drone network deployment and communication testing UWB ranging system calibration and validation IMU/odometry sensor alignment and bias estimation All system clocks synchronized and stable Threshold Configuration:\nEnvironmental parameters (urban, forest, open field) Mission criticality settings (survey precision vs. transit efficiency) Rover operational parameters (speed limits, maneuver capabilities) Safety margins and emergency response protocols 10.2 Operational Monitoring Real-Time Dashboard Requirements:\nGPS status (satellite count, signal strength, position quality) APS readiness (drone positions, UWB link quality, system health) Sensor fusion status (INS/odometry consistency, cross-validation results) Environmental conditions (detected interference, multipath indicators) System state and transition history Alert and Notification System:\nInfo Level: Normal system state changes and environmental detection Warning Level: Degraded performance, threshold approaches Critical Level: System failures, emergency procedures activated Emergency Level: Complete positioning loss, manual intervention required 10.3 Post-Mission Analysis Performance Metrics Collection:\nTransition frequency and success rates Position accuracy achieved in both GPS and APS modes System response times and latency measurements Environmental factor correlation with system performance Battery life and power consumption optimization System Optimization:\nThreshold refinement based on operational experience Calibration drift analysis and correction schedules Performance benchmarking against mission requirements Failure mode analysis and procedural improvements ","11-conclusion#11. Conclusion":"The Alternative Positioning System triggering framework provides robust, environment-adaptive positioning continuity for land surveying operations. By implementing multi-criteria decision logic with comprehensive cross-validation, the system ensures reliable detection of GPS degradation and seamless transition to UWB-based positioning.\nKey operational benefits include:\nSub-second Response: Critical GPS failures trigger APS activation in \u003c 1 second Environmental Adaptation: Dynamic thresholds adjust to urban, forest, and open field conditions Mission Flexibility: Configurable accuracy vs. efficiency trade-offs System Resilience: Multiple failure mode contingencies and graceful degradation Operational Continuity: 1 Hz position updates maintained throughout transitions The system achieves the target 10 cm³ positioning accuracy while providing robust operation across diverse surveying environments and mission profiles.","2-triggering-criteria-and-thresholds#2. Triggering Criteria and Thresholds":"2.1 GPS Quality Metrics Satellite Count Threshold:\nCritical Level: Warning Level: APS Activation: Signal Strength (C/N₀) Monitoring:\nHealthy Range: Degraded Range: Critical Level: APS Activation: Dilution of Precision (DOP) Limits:\nHorizontal DOP (HDOP): Position DOP (PDOP): Geometric DOP (GDOP): 2.2 Signal Continuity Monitoring Fix Loss Duration:\nAcceptable Gap: \u003c 2 seconds (normal GPS fluctuation) Warning Period: 2-5 seconds (begin APS preparation) Critical Period: \u003e 5 seconds (force APS activation) Time-of-Week (TOW) Anomalies:\nNormal Increment: Sequential 1-second steps Anomaly Detection: TOW jumps \u003e 2 seconds or backwards progression Action: Immediate integrity flag, consider APS if persistent 2.3 Position/Velocity Consistency Checks Static Position Variance: When rover velocity \u003c 0.1 m/s (stationary):\nNormal Variance: σ_position \u003c 2.0 meters Warning Level: σ_position = 2.0-5.0 meters Critical Level: σ_position \u003e 5.0 meters Action: APS activation if position “jumps” \u003e 10 meters while stationary Velocity Reasonableness:\nMaximum Expected: 15 m/s (54 km/h) for land survey rover Acceleration Limit: 5 m/s² (reasonable for terrain navigation) Anomaly Detection: Velocity \u003e 20 m/s or acceleration \u003e 8 m/s² Action: Flag GPS error, cross-check with IMU/odometry ","3-sensor-fusion-cross-validation#3. Sensor Fusion Cross-Validation":"3.1 INS/Odometry Comparison Dead-Reckoning Prediction Model:\nPosition_predicted = Position_last + ∫(Velocity_IMU + Bias_correction) dt Uncertainty_growth = σ_initial + σ_drift × √(Δt) Consistency Threshold:\nAcceptable Difference: |GPS_position - INS_predicted| \u003c 3 × σ_uncertainty Warning Level: Difference exceeds 3σ but \u003c 5σ Critical Level: Difference \u003e 5σ or consistently growing Action: APS activation when GPS-INS difference exceeds bounds for \u003e 3 consecutive measurements 3.2 Velocity and Heading Cross-Check IMU-GPS Velocity Comparison:\nAngular Rate Consistency: |GPS_heading_rate - IMU_yaw_rate| \u003c 10°/s Speed Consistency: |GPS_speed - Wheel_encoder_speed| \u003c 2 m/s Acceleration Limits: Ensure GPS-derived acceleration \u003c 8 m/s² Heading Validation:\nΔheading_GPS = GPS_heading(t) - GPS_heading(t-1) Δheading_IMU = ∫(IMU_yaw_rate) dt over same interval Heading_error = |Δheading_GPS - Δheading_IMU| Threshold: Heading_error \u003e 15° triggers GPS integrity warning\n3.3 UWB Cross-Validation (When Available) Distance Consistency Check: During GPS operation, continuously compare UWB-derived distances with GPS-calculated distances to drone positions:\nDistance_GPS = √[(GPS_rover - GPS_drone)²] Distance_UWB = ToF_measurement × c / 2 Distance_error = |Distance_GPS - Distance_UWB| Validation Criteria:\nNormal Operation: Distance_error \u003c 0.5 meters GPS Degradation: Distance_error = 0.5-2.0 meters GPS Failure: Distance_error \u003e 2.0 meters consistently Action: Distance_error \u003e 2.0m for \u003e 3 measurements triggers APS preparation ","4-environmental-and-operational-triggers#4. Environmental and Operational Triggers":"4.1 Environment-Specific Thresholds Urban Canyon Detection:\nIndicator: Satellite elevation angles predominantly \u003c 30° C/N₀ Pattern: Rapid fluctuations \u003e 10 dB within 5 seconds Multipath Signature: Position oscillations \u003e 5 meters with low velocity Action: Lower triggering thresholds by 20% in detected urban environments Forest Canopy Operations:\nIndicator: Gradual C/N₀ degradation over 10-30 seconds Satellite Loss Pattern: Sequential loss rather than simultaneous Expected Behavior: HDOP gradual increase \u003e 6.0 Action: Extend warning periods to 10 seconds before APS activation Open Field with Potential Jamming:\nIndicator: Simultaneous C/N₀ drop across all satellites AGC Response: Sudden increase in automatic gain control voltage Pattern Recognition: Uniform signal degradation regardless of satellite geometry Action: Immediate APS activation (\u003c 1 second response time) 4.2 Operational State Considerations Survey Mission Critical Phases:\nHigh-Precision Requirements: During active surveying (\u003c 10 cm positioning required) Transit Phases: Lower precision acceptable (\u003c 1 meter positioning) Stationary Operations: Position holding requirements (\u003c 50 cm drift) Dynamic Triggering Thresholds:\nThreshold_multiplier = Mission_criticality_factor × Environment_factor × Rover_speed_factor Where: Mission_criticality_factor: 0.5 (survey) to 1.5 (transit) Environment_factor: 0.7 (open) to 1.3 (urban/forest) Rover_speed_factor: 0.8 (stationary) to 1.2 (high speed) ","5-aps-activation-decision-logic#5. APS Activation Decision Logic":"5.1 Multi-Criteria Decision Matrix Weighted Scoring System:\nAPS_Score = W₁×Satellite_factor + W₂×Signal_factor + W₃×Continuity_factor + W₄×Consistency_factor + W₅×Environment_factor Where weights sum to 1.0: W₁ = 0.25 (Satellite count and geometry) W₂ = 0.20 (Signal strength and quality) W₃ = 0.20 (Fix continuity and time consistency) W₄ = 0.25 (Cross-sensor validation) W₅ = 0.10 (Environmental adaptation) Individual Factor Calculations:\nSatellite_factor = (4 - Current_sat_count) / 4.0 [0.0 to 1.0] Signal_factor = (35 - Average_CNR) / 35.0 [0.0 to 1.0] Continuity_factor = Fix_loss_duration / 5.0 [0.0 to 1.0] Consistency_factor = GPS_INS_error / Max_tolerance [0.0 to 1.0] Environment_factor = Environmental_risk_level [0.0 to 1.0] Decision Thresholds:\nAPS_Score \u003c 0.3: GPS reliable, continue normal operation APS_Score 0.3-0.6: GPS degraded, prepare APS (activate drones, begin calibration) APS_Score \u003e 0.6: GPS unreliable, activate APS immediately 5.2 State Machine Implementation stateDiagram-v2 [*] --\u003e GPS_Primary GPS_Primary --\u003e GPS_Degraded : APS_Score \u003e 0.3 GPS_Primary --\u003e GPS_Lost : Critical_failure GPS_Degraded --\u003e GPS_Primary : APS_Score \u003c 0.2 GPS_Degraded --\u003e APS_Preparing : APS_Score \u003e 0.6 GPS_Degraded --\u003e GPS_Lost : Complete_signal_loss APS_Preparing --\u003e APS_Active : Drone_network_ready APS_Preparing --\u003e GPS_Degraded : GPS_recovery APS_Active --\u003e GPS_Recovery : GPS_signals_return GPS_Recovery --\u003e GPS_Primary : Position_consistency_validated GPS_Recovery --\u003e APS_Active : GPS_fails_validation GPS_Lost --\u003e APS_Emergency : Immediate_APS_required APS_Emergency --\u003e APS_Active : Emergency_positioning_established 5.3 Hysteresis and Anti-Chatter Logic Transition Delays:\nGPS → APS: 1-5 seconds depending on criticality APS → GPS: 10-15 seconds minimum (ensure GPS stability) Emergency Transitions: \u003c 1 second (critical failures) Anti-Chatter Implementation:\nState_change_timer = Current_time - Last_state_change Min_dwell_time = 5.0 seconds (normal) or 1.0 seconds (emergency) IF (APS_Score crosses threshold) AND (State_change_timer \u003e Min_dwell_time): Allow state transition ELSE: Maintain current state, continue monitoring ","6-aps-preparation-and-activation-sequence#6. APS Preparation and Activation Sequence":"6.1 Pre-Activation Phase (APS Preparation) Duration: 2-10 seconds depending on system state\nDrone Network Activation:\nCommand Transmission: Base station sends activation command to drone swarm Position Establishment: Drones move to optimal multilateration geometry System Check: Verify UWB communication links and ranging capability Calibration Update: Perform quick time-offset calibration if needed Rover System Preparation:\nPrecision Clock Activation: Begin thermal stabilization (200ms) UWB System Startup: Initialize Time-of-Flight measurement capability Filter Initialization: Prepare Kalman filter with current GPS-derived state Cross-Check Validation: Verify INS/odometry consistency 6.2 APS Activation Sequence Critical Path Timeline (Target: \u003c 500ms total):\ngantt title APS Activation Timeline dateFormat X axisFormat %L section Drone_Network Position_Verification : 0, 100 UWB_Link_Test : 100, 200 Range_Calibration : 200, 300 section Rover_Systems Clock_Stabilization : 0, 200 ToF_System_Ready : 200, 250 Filter_Initialization : 250, 350 section Integration First_Position_Fix : 350, 450 Position_Validation : 450, 500 Step-by-Step Process:\nT+0ms: Receive APS activation command T+50ms: Drone positions verified, UWB links established T+200ms: Rover precision clocks stabilized T+250ms: First ToF measurements initiated T+350ms: Initial multilateration solution computed T+450ms: Position validated against INS prediction T+500ms: APS declared active, GPS monitoring continues in background 6.3 Position Hand-off Protocol Coordinate System Alignment: The APS provides position relative to drone network. Conversion to GPS coordinates requires:\nGPS_position = Drone_reference_GPS + APS_relative_position + Calibration_offset Hand-off Validation:\nPosition_difference = |GPS_last_known - APS_first_fix| Velocity_consistency = |GPS_velocity_last - APS_velocity_computed| IF (Position_difference \u003c 5.0 meters) AND (Velocity_consistency \u003c 2.0 m/s): Accept APS hand-off ELSE: Flag position discontinuity, apply additional validation ","7-performance-monitoring-and-validation#7. Performance Monitoring and Validation":"7.1 APS Position Quality Assessment Real-Time Quality Metrics:\nGDOP Monitoring: Geometric dilution of precision from drone constellation Range Residuals: RMS error in distance measurements Solution Convergence: Time to achieve 10 cm³ accuracy Cross-Validation: Consistency with IMU/odometry predictions Quality Thresholds for 10 cm³ Target:\nRequired_distance_accuracy = √(Volume_target / (4π/3)) = √(0.1 / 4.19) = 0.154 m GDOP_limit = 2.5 (maximum acceptable) Range_measurement_accuracy = 0.154 / 2.5 = 0.062 m = 6.2 cm 7.2 System Health Monitoring Drone Network Status:\nMinimum Active Drones: 4 (for 3D positioning) Optimal Configuration: 6-8 drones (redundancy and improved geometry) Communication Health: \u003c 1% packet loss on UWB links Position Stability: Drone position uncertainty \u003c 10 cm Rover System Health:\nClock Stability: Frequency drift \u003c 0.1 ppm over measurement cycle ToF Measurement Quality: SNR \u003e 20 dB on ranging signals Processing Latency: Solution update rate = 1 Hz ± 50ms Power Management: Precision clock duty cycle optimization 7.3 Transition Success Criteria APS Activation Success:\nPosition Availability: Valid 3D position within 500ms of activation Accuracy Compliance: Position uncertainty \u003c 0.2 m (initial), converging to 0.1 m Update Rate: Consistent 1 Hz position updates maintained System Integration: Smooth hand-off from GPS coordinates GPS Recovery Validation:\nSignal Recovery: Satellite count \u003e 6, C/N₀ \u003e 35 dB-Hz consistently Position Consistency: GPS-APS difference \u003c 0.5 m for \u003e 15 seconds Cross-Validation: GPS position validated against INS/odometry predictions Stability Confirmation: No integrity flags for \u003e 30 seconds ","8-environmental-adaptation-strategies#8. Environmental Adaptation Strategies":"8.1 Dynamic Threshold Adjustment Urban Environment Adaptations:\nSatellite Mask Angle: Increase from 5° to 15° (exclude low-elevation satellites) Multipath Detection: Monitor position oscillations \u003e 3 m as trigger Signal Quality: Reduce C/N₀ threshold to account for reflections Response Time: Faster APS activation (2-second vs. 5-second delay) Forest/Canopy Operations:\nGradual Degradation: Extend monitoring period to 10 seconds Satellite Tracking: Accept temporary signal blockage patterns IMU Weighting: Increase reliance on inertial navigation during transitions Drone Positioning: Ensure drone network above canopy level Open Field with Interference:\nJamming Detection: Monitor AGC levels and uniform signal degradation Rapid Response: Immediate APS activation (\u003c 1 second) Direction Finding: Optional bearing to interference source Recovery Protocols: Automated GPS retry procedures 8.2 Mission-Specific Adaptations High-Precision Surveying:\nTighter Thresholds: Reduce acceptable position uncertainty to 5 cm Extended Validation: 30-second GPS stability requirement before recovery Quality Assurance: Continuous cross-validation between systems Data Logging: Comprehensive timing and accuracy metrics Rapid Transit Operations:\nRelaxed Accuracy: Accept 1-meter positioning during movement Faster Transitions: Reduce validation periods for efficiency Speed Compensation: Adjust thresholds based on rover velocity Simplified Validation: Streamlined hand-off procedures ","9-failure-modes-and-contingency-procedures#9. Failure Modes and Contingency Procedures":"9.1 APS System Failures Drone Network Failures:\nSingle Drone Loss: Continue with reduced accuracy (5 drones minimum) Multiple Drone Loss: Switch to 2D positioning if possible Complete Network Loss: Revert to pure INS/odometry with degraded accuracy Communication Failure: Implement backup communication protocols UWB System Failures:\nRanging Accuracy Degradation: Adjust quality thresholds dynamically Clock Synchronization Issues: Perform emergency recalibration Interference Detection: Switch frequency bands or modulation schemes Hardware Malfunction: Graceful degradation to available sensors 9.2 Hybrid System Failures Simultaneous GPS and APS Loss:\nEmergency Protocol: Immediate rover stop and alert generation Backup Navigation: Pure inertial navigation with manual waypoint updates Recovery Actions: Automated system restart and recalibration Operator Notification: Real-time status and recommended actions Sensor Fusion Conflicts:\nInconsistent Solutions: Weight measurements by quality metrics Calibration Drift: Automated bias estimation and correction Filter Divergence: Reset Kalman filter with best available position Cross-Check Failures: Flag unreliable sensors and adapt accordingly ","abstract#Abstract":"This document provides comprehensive guidelines for triggering the Alternative Positioning System (APS) when GPS denial or degradation is detected during land surveying operations. The APS utilizes UWB-based multilateration with drone agents to maintain positioning accuracy within 10 cm³ volume uncertainty while operating in GPS-denied environments.","alternative-positioning-system-aps-triggering-documentation#Alternative Positioning System (APS) Triggering Documentation":"Alternative Positioning System (APS) Triggering Documentation"},"title":"5 - Alternative Posiontioning System Triggering"},"/research/gps_denied_rover/6_systems_calibration/":{"data":{"1-system-overview#1. System Overview":"1.1 Multi-Modal Positioning Architecture The rover employs a sophisticated multi-sensor positioning system comprising:\nPrimary GPS System: Standard GNSS receiver with RTK capability for centimeter-level accuracy Alternative Positioning System (APS): UWB-based multilateration using drone network Inertial Navigation System (INS): IMU providing acceleration, angular velocity, and orientation Odometry System: Wheel encoders for dead-reckoning navigation Timing Systems: Standard clock (GPS synchronization) and precision clock (UWB operations) 1.2 Calibration Philosophy Calibration procedures focus on establishing consistent coordinate frames, timing synchronization, and sensor bias characterization across all positioning modalities. The goal is to enable seamless transitions between systems while maintaining positioning accuracy within the 10 cm³ volume constraint.\nCoordinate Frame Hierarchy:\nWorld Coordinate System (WGS84/UTM) Local Survey Coordinate System Rover Body Frame Individual Sensor Frames ","2-gps-system-calibrations#2. GPS System Calibrations":"","3-uwb-alternative-positioning-system-calibrations#3. UWB Alternative Positioning System Calibrations":"","4-inertial-navigation-system-calibrations#4. Inertial Navigation System Calibrations":"","5-odometry-system-calibrations#5. Odometry System Calibrations":"5.1 Wheel Encoder Calibration ","6-clock-synchronization-systems#6. Clock Synchronization Systems":"6.1 Finding Clock Offsets ","7-system-integration-calibrations#7. System Integration Calibrations":"7.1 Multi-Sensor Fusion Calibration ","8-calibration-validation-and-quality-assurance#8. Calibration Validation and Quality Assurance":"8.2 Continuous Calibration Monitoring Real-Time Quality Indicators:\nMonitor calibration health during operations:\ngraph TD A[Sensor Data Input] --\u003e B[Quality Check] B --\u003e C{Within Specifications?} C --\u003e|Yes| D[Normal Operation] C --\u003e|No| E[Calibration Flag] E --\u003e F[Automatic Recalibration] F --\u003e G[Validation Test] G --\u003e H{Calibration Successful?} H --\u003e|Yes| D H --\u003e|No| I[Manual Intervention Required] Calibration Drift Detection:","abstract#Abstract":"This document provides comprehensive calibration procedures for integrated positioning systems in land surveying operations, covering GPS receivers, UWB-based Alternative Positioning Systems (APS), Inertial Navigation Systems (INS), and odometry sensors. Proper calibration ensures seamless transitions between positioning modes while maintaining 10 cm³ volume accuracy requirements.","systems-calibrations-documentation#Systems Calibrations Documentation":"Systems Calibrations Documentation"},"title":"6 - Systems Calibration"},"/research/gps_denied_rover/7_gps_specific_cybersecurity/":{"data":{"gps-specific-cybersecurity#GPS Specific Cybersecurity":"GPS Specific CybersecurityAttack Vectors:\nRF Jamming GPS Spoofing GPS Replay Signal Injection Hardware Vulnerabilities "},"title":"7 - GPS Specific Cybersecurity"},"/research/gps_denied_rover/8_comprehensive_variables_and_constants/":{"data":{"":"","detecting-target-occlusion-using-geometry#Detecting Target Occlusion Using Geometry":"Variables geometricTolerance $\\epsilon_{\\mathrm{geo}}$ - A threshold for determining geometric consistency, set to 0.1m. anchorPosition2D $(x_i, y_i)$ - Known 2D coordinates of the drone anchors. anchorPosition3D $(x_i, y_i, z_i)$ - Known 3D coordinates of the drone anchors. ToFDistanceMeasurement $r_i$ - The Time-of-Flight measured distance from anchor $i$ to the rover. centerSeparationDistance $d_{ij}$ - The distance between the centers of two circles/spheres. circleIntersectionParameterA $a$ - An intermediate calculation parameter for circle/sphere intersection. circleIntersectionParameterH $h$ - An intermediate calculation parameter representing a half-chord length or radius of intersection circle. midpointIntersection $(x_m, y_m)$ - Midpoint between two circle intersections. intersectionPoint1 $(x_{\\mathrm{int1}}, y_{\\mathrm{int1}})$ - The first intersection point of two circles. intersectionPoint2 $(x_{\\mathrm{int2}}, y_{\\mathrm{int2}})$ - The second intersection point of two circles. candidatePoint2D $(x_k, y_k)$ - A candidate point for the rover’s position in 2D, derived from pairwise circle intersections. distanceFromCandidateToAnchor $d_{k,i}$ - The calculated distance from a candidate point to an anchor. intersectionCountCandidate - The number of circles that intersect at a specific candidate point within the tolerance. roverPosition $(\\mathrm{x_{rover}}, \\mathrm{y_{rover}})$ or $(\\mathrm{x_{rover}}, \\mathrm{y_{rover}}, \\mathrm{z_{rover}})$ - The determined position of the rover. maximumIntersectionCount $\\mathrm{count_{max}}$ - The highest number of circles/spheres intersecting at a single point. distanceFromRoverToAnchor $d_{\\mathrm{rover},i}$ - The calculated distance from the determined rover position to an anchor. error $i$ - The absolute difference between the calculated distance from the rover’s position to anchor $i$ and the measured ToF distance $r_i$. Constants sampleAccuracyConstraint $0.1 \\ \\mathrm{m}$ - The recommended value for geometric tolerance $\\epsilon_{\\mathrm{geo}}$. minAnchors2D - A minimum of three known locations is required for 2D multilateration. minAnchors3D - A minimum of four known locations is required for 3D multilateration. noOcclusionCondition - $\\mathrm{count_{max}} = n$, where $n$ is the total number of anchors. singleOcclusionCondition - $\\mathrm{count_{max}} = n-1$. multipleOcclusionCondition - $\\mathrm{count_{max}} \u003c n-1$. minimumPositioningRequirements - Must maintain $\\ge 3$ anchors for 2D, $\\ge 4$ for 3D during multiple occlusion analysis. ","detecting-target-occlusion-using-odometry-on-board-a-rover#Detecting Target Occlusion Using Odometry On-Board a Rover":"Variables odometryTolerance $\\epsilon_{\\mathrm{odom}}$ - A threshold for validating odometry consistency, set to 0.05 m. roverDisplacementVector $(\\Delta x, \\Delta y, \\Delta z)$ - The displacement of the rover measured by odometry (e.g., wheel encoders, accelerometer). timeInterval $\\Delta t$ - The time duration over which displacement is measured. displacementMagnitude $L$ - The scalar magnitude of the rover’s displacement. apparentVelocity $v_{\\mathrm{apparent}}$ - The calculated velocity of the rover based on odometry. rangeDifference $\\Delta r_i$ - The change in measured range to anchor $i$ between new and old measurements ($r_{i,new} - r_{i,old}$). violationFlag $\\mathrm{violation}_i$ - A boolean indicating if anchor $i$ violates the triangle inequality constraint. roverHeading $\\theta$ - The current heading of the rover. anchorBearing $\\phi_i$ - The bearing from the rover to anchor $i$. expectedRange $r_{i,expected}$ - The range to anchor $i$ predicted by the law of cosines based on previous range, displacement, and bearings. error $i$ - The absolute difference between the new measured range and the expected range for anchor $i$. confidenceWeightGeometric $w_{\\mathrm{geo}}$ - Confidence weight for geometric detection. confidenceWeightOdometry $w_{\\mathrm{odom}}$ - Confidence weight for odometry detection. combinedOcclusionProbability $P(\\mathrm{occluded}_i)$ - The combined probability of occlusion for an anchor based on weighted geometric and odometry results. finalOcclusionStatus $\\mathrm{final_occluded}_i$ - The final boolean decision for occlusion. Constants sampleAccuracyConstraintOdometry $0.05 \\ \\mathrm{m}$ - The recommended value for odometry tolerance $\\epsilon_{\\mathrm{odom}}$. safetyFactorOpenField $2.0$ - Safety factor for position jump detection in open field. safetyFactorUrbanCanyon $3.0$ - Safety factor for position jump detection in urban canyon. safetyFactorForestCanopy $4.0$ - Safety factor for position jump detection in forest canopy. safetyFactorMountainousTerrain $5.0$ - Safety factor for position jump detection in mountainous terrain. minimumMeasurementsForTemporalFiltering $N=5$ - Recommended sliding window size for temporal smoothing. violationPersistenceThreshold $\\ge 60%$ - Percentage of recent measurements that must show violation for occlusion confirmation. violationMagnitudeThreshold $2 \\times \\epsilon_{\\mathrm{odom}}$ - Minimum violation magnitude for high confidence occlusion. confidenceWeightSum $w_{\\mathrm{geo}} + w_{\\mathrm{odom}} = 1.0$ - Weights must sum to unity. fusionDecisionThreshold $0.6$ - Threshold for deciding final occlusion status. disagreementLowerConfidenceThreshold $0.4$ - Lower threshold for conservative approach during disagreement. k1_k2 - Factors for setting statistical detection thresholds based on desired false positive rate (e.g., $k=2$ for ~5% FP, $k=3$ for ~0.3% FP, $k=4$ for ~0.006% FP). ","measuring-time-of-flight-using-radio-communication-between-two-devicesdrones#Measuring Time-of-Flight using Radio Communication Between Two Devices/Drones":"Variables distance $d$ - The distance between two transceivers. timeOneWay $t$ - The time for a signal to travel one-way. roundTripTime $\\Delta t$ - The time for a signal to travel from transmitter to receiver and back. signalTransmissionTime $T_1$ - The time when a signal is transmitted. acknowledgmentReceptionTime $T_2$ - The time when an acknowledgment signal is received. roundTripTimeUncertainty $\\sigma_t$ - The uncertainty in round-trip time measurement. distanceAccuracy $\\Delta d$ or $\\sigma_d$ - The error in distance measurement. positionAccuracy $\\sigma_{\\mathrm{position}}$ - The accuracy of the overall position determined by multilateration. volumeUncertainty $\\sigma_V$ - The uncertainty in the 3D positioning volume. clockPrecision $\\Delta t$ - The required time resolution for a target distance accuracy. clockFrequency $f_{\\mathrm{clock}}$ - The required clock frequency for a target time resolution. signalFrequency $f_{\\mathrm{signal}}$ - The frequency of the radio signal used for ToF measurement. wavelength $\\lambda$ - The wavelength of the radio signal. processingDelay $T_{\\mathrm{offset}}$ - The total system delay, including signal detection, acknowledgment generation, transmission preparation, reception processing, and acknowledgment transmission. knownDistance $d_{\\mathrm{known}}$ - A precisely known distance used during calibration. measuredDistanceCalibration $d_{\\mathrm{measured}}$ - The distance calculated from raw ToF measurement during calibration. distanceOffset $D_{\\mathrm{offset}}$ - The difference between known and measured distances during calibration. actualDistance $d_{\\mathrm{actual}}$ - The distance after applying calibration offset. measuredTimeCalibration - The raw measured time during calibration. universalTime $t_{\\mathrm{universal}}$ - A theoretical universal time reference. standardClockOffset $\\delta_{\\mathrm{standard}}$ - The constant offset of the standard clock. standardClockError $\\epsilon_{\\mathrm{standard}}$ - The drift rate of the standard clock. precisionClockOffset $\\delta_{\\mathrm{precision}}$ - The constant offset of the precision clock. precisionClockError $\\epsilon_{\\mathrm{precision}}$ - The drift rate of the precision clock. precisionClockActiveTime $t_{\\mathrm{active}}$ - The cumulative active time of the precision clock. baseStationReceptionTime $T_{\\mathrm{base}}$ - The time at which the base station receives data using its standard clock. synchronizationWindowTime $\\Delta t_{\\mathrm{sync}}$ - The maximum time window for collecting all distance measurements to maintain position accuracy. maxRoverVelocity $v_{\\max}$ - The maximum velocity of the rover. stabilizationTime $T_{\\mathrm{stabilization}}$ - Time required for precision clock thermal stabilization. measurePhaseTime $T_{\\mathrm{measure_phase}}$ - Time required for ToF measurements. transmitPhaseTime $T_{\\mathrm{transmit_phase}}$ - Time required for data transmission. computeTime $T_{\\mathrm{compute}}$ - Time required for multilateration calculation. totalCycleTime $T_{\\mathrm{total}}$ - The sum of all times in a complete measurement cycle. precisionClockDutyCycle $\\mathrm{Duty}_{\\mathrm{cycle}}$ - The percentage of time the precision clock is active. temperatureFrequencyRelationshipAlpha $\\alpha$ - The temperature coefficient for crystal oscillators relating temperature change to frequency change. residualTemperatureChange $\\Delta T_{\\mathrm{residual}}$ - The remaining temperature instability after thermal stabilization. clockResolution - The smallest measurable time increment of a clock. bandwidth $BW$ - The bandwidth of the signal. signalToNoiseRatio $SNR$ - The signal-to-noise ratio. Constants speedOfLightVacuum $c \\approx 2.998 \\times 10^8 \\ \\mathrm{m/s}$ - Speed of light in vacuum. speedOfLightAir $c_{\\mathrm{air}} \\approx 2.997 \\times 10^8 \\ \\mathrm{m/s}$ - Speed of light in air. refractiveIndexAir $n_{\\mathrm{air}} \\approx 1.0003$ - Refractive index of air at standard conditions. temperatureVariationImpact $\\pm 0.1%$ - Speed variation per 30°C due to temperature. humidityImpact - Negligible for radio frequencies. atmosphericPressureImpact - Minimal impact at operational altitudes. geometricDilutionOfPrecision GDOP = 1.22 (assumed for 4 agents) - A factor quantifying the effect of satellite/agent geometry on position accuracy. kGeometry - A factor typically ranging from 1.2 to 2.5 depending on agent spatial distribution for position accuracy. targetVolumeAccuracy $10 \\ \\mathrm{cm^3}$ - The target volume uncertainty for positioning. targetPositionalAccuracy $\\sigma_{\\mathrm{position}} \\approx 0.134 \\ \\mathrm{m}$ - Required positional accuracy to achieve 10 cm³ volume uncertainty. requiredDistanceAccuracy $\\sigma_d = 0.22 \\ \\mathrm{m}$ - Required distance accuracy to achieve 0.134 m positional accuracy. requiredClockPrecision $\\Delta t = 734 \\ \\mathrm{ps}$ - Required clock precision for 0.22 m distance accuracy. requiredClockFrequency $f_{\\mathrm{clock}} \\geq 1.4 \\ \\mathrm{GHz}$ - Required clock frequency for 734 ps resolution. nyquistSamplingCriterion - Sampling frequency must be at least twice the signal frequency ($f_{\\mathrm{clock}} \\geq 2 \\times f_{\\mathrm{signal}}$). practicalSafetyMargin $10\\times$ - A recommended safety margin for signal frequency ($f_{\\mathrm{signal}} \\leq f_{\\mathrm{clock}}/2 \\times 0.1$). maxAllowableSignalFrequency $70 \\ \\mathrm{MHz}$ - Recommended maximum signal frequency for 1.4 GHz clock. minimumSeparationDistance $d_{\\mathrm{min}} = 4.28 \\ \\mathrm{m}$ - Minimum distance between agents to ensure far-field operation. transmitPower $1 \\ \\mathrm{W}$ - Assumed transmitter power (30 dBm) for link budget analysis. receiverSensitivity $-100 \\ \\mathrm{dBm}$ - Assumed receiver sensitivity for link budget analysis. linkBudget $130 \\ \\mathrm{dB}$ - The total allowable path loss. practicalMaximumRange $\\sim 1 \\ \\mathrm{km}$ - The estimated maximum line-of-sight range. calibrationExampleKnownDistance $10.00 \\ \\mathrm{m}$ - Example known distance for calibration. calibrationExampleMeasuredTime $70.5 \\ \\mathrm{ns}$ - Example measured time during calibration. communicationSystemABandwidth $\\sim 1-10 \\ \\mathrm{kbps}$ - Lower bandwidth requirements for command and control. standardSystemClockPrecision $1-100 \\ \\mathrm{MHz}$ - Typical precision for standard clocks. precisionClockThermalStabilizationPeriod $100-500 \\ \\mathrm{ms}$ - Time needed for precision clock to stabilize. ToFMeasurementWindow $1-10 \\ \\mathrm{ms}$ - Duration of high-precision ToF measurements. dataTransmissionPhase $10-50 \\ \\mathrm{ms}$ - Duration for agents to transmit results. standardClockResolution - The resolution of the standard clock, e.g., for a 100 MHz clock, this is 10 ns. clockActivationJitter $\\approx 100 \\ \\mathrm{ps}$ - Typical for precision oscillator startup, equivalent to 1.5 cm distance error. targetTemperatureStability $\\pm 0.1^{\\circ} \\mathrm{C}$ - Target stability for thermal management. thermalStabilizationError $\\approx 1.5 \\ \\mathrm{cm}$ - Error due to residual temperature instability. processingDelayStability $\\approx \\pm 1 \\ \\mathrm{ns}$ - Typical stability for digital systems. urbanMultipathError $\\approx 0.1 \\times \\lambda$ - Estimated multipath error in urban environments. exampleSNR $20 \\ \\mathrm{dB}$ - Example signal-to-noise ratio for error calculation. estimatedPrecisionClockPower $5 \\ \\mathrm{W}$ - Estimated power consumption of a precision clock when active. estimatedStandardClockPower $1 \\ \\mathrm{W}$ - Estimated power consumption of standard clocks. estimatedRadioSystemPower $2 \\ \\mathrm{W}$ - Estimated average power consumption for radio systems. ","multilateration-in-3-dimensions#Multilateration in 3 Dimensions":"Variables unknownPosition $(x, y, z)$ - The coordinates of the point whose location is to be determined. knownPosition $(x_i, y_i, z_i)$ - The coordinates of each known reference point (e.g., drone anchor). measuredDistance $d_i$ - The measured distance from each known reference point to the unknown position. intersectionCircleCenter $\\mathbf{p}$ - The center coordinates of a circular intersection formed by two spheres. intersectionCircleNormalVector $\\mathbf{n}$ - The normal vector of the plane on which an intersection circle lies. intersectionCircleRadius $h$ - The radius of an intersection circle formed by two spheres. leastSquaresMatrixA $\\mathbf{A}$ - A matrix constructed from the normal vectors of intersection planes for solving the system of plane equations. leastSquaresVectorB $\\mathbf{b}$ - A vector constructed from the dot products of normal vectors and plane centers. solutionVectorX $\\mathbf{x}$ - The unknown position vector obtained by solving the least squares system. candidatePoint $(x_c, y_c)$ - A potential point where intersections occur (used in 2D for maximum intersection finding). intersectionCount - The number of circles/spheres that a candidate point lies on within a given tolerance. error $i$ - The difference between the calculated distance from a potential rover position to an anchor and the measured ToF distance, used to identify occluded anchors. epsilonGeo - Geometric tolerance, typically set to 0.1 m, used for validating intersections and consistency. Constants minReferencePoints3D - A minimum of four known locations is required to uniquely determine an unknown location in three dimensions. distanceSeparation - Ideally, no known location should be the same distance from the unknown location as any other known location. angularSeparation - Known locations should not be positioned at the same angle from the unknown location. nonCoplanarPositioning - The four reference points should not be coplanar to ensure a unique 3D solution. altitudeConstraints - Maintaining all drones within the same altitude creates an imaginary XY plane constraint. epsilon - A tolerance value used in counting intersections for candidate points. ","triggers-for-determining-that-gps-has-become-unreliable-and-need-to-switch-to-the-alternative-positioning-system-aps#Triggers for Determining that GPS Has Become Unreliable and Need to Switch to the Alternative Positioning System (APS)":"Variables fixQuality - GPS receiver lock status (e.g., 3D, 2D, No Fix). lockDegradationEvents - Number of times fix quality degrades within a period. reacquisitionTime - Time taken for GPS receiver to reacquire lock (cold or warm start). trackedSatelliteCount - Number of satellites currently being tracked by the GPS receiver. carrierToNoiseRatio C/N₀ - Signal strength per channel. automaticGainControl AGC voltage - Receiver’s compensation for noise floor. checksumFailureRate - Rate of corrupted NMEA/UBX messages. truncatedSentenceRate - Rate of incomplete GPS sentences. parityErrorFrequency - Frequency of parity errors in GPS data. horizontalAlertLimit HAL - RAIM threshold for horizontal error. verticalAlertLimit VAL - RAIM threshold for vertical error. timeToAlert - Time for RAIM to issue an alert. positionJumpMagnitude - Magnitude of sudden, unrealistic position changes. roverVelocity - GPS-derived or actual rover speed. roverAcceleration - GPS-derived or actual rover acceleration. rtkFixStatus - RTK solution quality (RTK-FIX, RTK-FLOAT, DGPS, Single Point). carrierPhaseCycleSlipCount - Number of detected cycle slips. insPosition - Position predicted by the Inertial Navigation System (INS). gpsPosition - Position derived from GPS. insDriftRate - Rate at which INS accumulates error. insUncertainty $\\sigma_{\\mathrm{INS}}$ - Uncertainty of the INS. gpsUncertainty $\\sigma_{\\mathrm{GPS}}$ - Uncertainty of the GPS. combinedUncertainty $\\sqrt{\\sigma_{\\mathrm{INS}}^2 + \\sigma_{\\mathrm{GPS}}^2}$ - Combined uncertainty of INS and GPS. wheelEncoderSpeed - Speed derived from wheel encoders. gpsHeadingRate - Heading rate derived from GPS. imuYawRate - Yaw rate from IMU. headingError - Error in heading calculation. UWBdistanceError - Difference between UWB-derived and GPS-calculated distances to drones. satelliteElevationAngle - Angle of satellites above horizon. positionOscillationMagnitude - Magnitude of position fluctuations, indicative of multipath. hdop - Horizontal Dilution of Precision. pdop - Position Dilution of Precision. gdop - Geometric Dilution of Precision. gpsApsScore - A weighted score indicating GPS reliability, used for APS activation decision. rmsRangeResiduals - Root Mean Square error in distance measurements (for APS quality). solutionConvergenceTime - Time for APS to achieve target accuracy. minActiveDrones - Minimum number of active drones required for positioning. uwbPacketLoss - Packet loss rate on UWB communication links. dronePositionUncertainty - Uncertainty in known drone positions. clockFrequencyDrift - Drift of the precision clock over measurement cycle. rangingSignalSNR - Signal-to-noise ratio of ToF ranging signals. processingLatency - Time taken for position solution updates. gpsApsDifference - Difference between GPS and APS calculated positions during recovery. Constants detectionLatencyTarget $\\le 1 \\ \\mathrm{second}$ - Target response time for GPS denial detection. positionUpdateRateTarget $1 \\ \\mathrm{Hz}$ - Target position update frequency. volumeAccuracyConstraintTarget $10 \\ \\mathrm{cm^3}$ - Required positioning accuracy when operating. falsePositiveRateTarget $\u003c 1%$ - Acceptable rate of incorrect denial detections. lockDegradationThreshold $\u003e 3$ in 10 seconds - Number of lock degradation events to trigger detection. reacquisitionTimeColdStart $\u003e 30 \\ \\mathrm{seconds}$ - Reacquisition time for cold start to trigger detection. reacquisitionTimeWarmStart $\u003e 5 \\ \\mathrm{seconds}$ - Reacquisition time for warm start to trigger detection. normalSatelliteCountOpenSky $8-12$ satellites - Expected satellite count in open sky. satelliteCountWarningThreshold $\u003c 6$ satellites - Warning level for satellite count. satelliteCountCriticalThreshold $\u003c 4$ satellites - Critical level for satellite count. satelliteCountDropRate $\u003e 50%$ drop in $\u003c 5$ seconds - Rate of change to trigger detection. normalCN0OpenField $40-50 \\ \\mathrm{dB-Hz}$ - Expected C/N₀ in open field. normalCN0LightFoliage $35-45 \\ \\mathrm{dB-Hz}$ - Expected C/N₀ in light foliage. normalCN0UrbanCanyons $25-40 \\ \\mathrm{dB-Hz}$ - Expected C/N₀ in urban canyons. normalCN0HeavyFoliage $20-35 \\ \\mathrm{dB-Hz}$ - Expected C/N₀ in heavy foliage. checksumFailureRateThreshold $\u003e 5%$ - Rate to indicate interference. truncatedSentenceRateThreshold $\u003e 2%$ - Rate to indicate signal disruption. parityErrorFrequencyThreshold $\u003e 1%$ - Rate to indicate data corruption. maxRoverSpeedExpected $15 \\ \\mathrm{m/s}$ - Maximum expected speed for a land survey rover. maxRoverAccelerationLimit $5 \\ \\mathrm{m/s^2}$ - Reasonable acceleration limit for terrain navigation. anomalyVelocityThreshold $\u003e 20 \\ \\mathrm{m/s}$ - Velocity exceeding this flags GPS error. anomalyAccelerationThreshold $\u003e 8 \\ \\mathrm{m/s^2}$ - Acceleration exceeding this flags GPS error. acceptableFixLossDuration $\u003c 2 \\ \\mathrm{seconds}$ - Normal GPS fluctuation. warningFixLossDuration $2-5 \\ \\mathrm{seconds}$ - Begin APS preparation. criticalFixLossDuration $\u003e 5 \\ \\mathrm{seconds}$ - Force APS activation. towAnomalyJumpThreshold $\u003e 2 \\ \\mathrm{seconds}$ - TOW jumps to trigger anomaly detection. staticPositionNormalVariance $\\sigma_{\\mathrm{position}} \u003c 2.0 \\ \\mathrm{meters}$. staticPositionWarningVariance $\\sigma_{\\mathrm{position}} = 2.0-5.0 \\ \\mathrm{meters}$. staticPositionCriticalVariance $\\sigma_{\\mathrm{position}} \u003e 5.0 \\ \\mathrm{meters}$. staticPositionJumpAPSActivation $\u003e 10 \\ \\mathrm{meters}$ - Position jump while stationary to trigger APS. insGpsAcceptableDifference $|GPS_{position} - INS_{predicted}| \u003c 3 \\times \\sigma_{\\mathrm{uncertainty}}$. insGpsWarningDifference $3\\sigma \\text{ to } 5\\sigma$. insGpsCriticalDifference $\u003e 5\\sigma$ or consistently growing. insGpsActivationCondition - When GPS-INS difference exceeds bounds for $\u003e 3$ consecutive measurements. imuGpsAngularRateConsistency $|GPS_{heading_rate} - IMU_{yaw_rate}| \u003c 10^{\\circ}/\\mathrm{s}$. gpsWheelEncoderSpeedConsistency $|GPS_{speed} - Wheel_{encoder_speed}| \u003c 2 \\ \\mathrm{m/s}$. headingValidationThreshold $15^{\\circ}$ - Heading error to trigger GPS integrity warning. uwbDistanceConsistencyNormal $\u003c 0.5 \\ \\mathrm{meters}$ - Normal operation for UWB cross-validation. uwbDistanceConsistencyDegradation $0.5-2.0 \\ \\mathrm{meters}$ - GPS degradation indication. uwbDistanceConsistencyFailure $\u003e 2.0 \\ \\mathrm{meters}$ consistently - GPS failure indication. uwbDistanceErrorTrigger $\u003e 2.0 \\ \\mathrm{m}$ for $\u003e 3$ measurements - Triggers APS preparation. urbanCanyonLowerThresholdPercentage $20%$ - Lowering thresholds in urban environments. forestCanopyWarningExtension $10 \\ \\mathrm{seconds}$ - Extend warning periods for APS activation. openFieldJammingResponse $\u003c 1 \\ \\mathrm{second}$ - Immediate APS activation. highPrecisionSurveyingAccuracy $\u003c 10 \\ \\mathrm{cm}$ - Required positioning for active surveying. transitPhaseAccuracy $\u003c 1 \\ \\mathrm{meter}$ - Acceptable positioning for transit. stationaryOperationsDrift $\u003c 50 \\ \\mathrm{cm}$ - Position holding requirement. apsScoreThresholdReliableGPS $\u003c 0.3$. apsScoreThresholdDegradedGPS $0.3-0.6$. apsScoreThresholdUnreliableGPS $\u003e 0.6$. gpsToApsTransitionDelay $1-5 \\ \\mathrm{seconds}$ (depending on criticality). apsToGpsTransitionDelay $10-15 \\ \\mathrm{seconds}$ (minimum for GPS stability). emergencyTransitionDelay $\u003c 1 \\ \\mathrm{second}$. apsPreparationDuration $2-10 \\ \\mathrm{seconds}$. precisionClockStabilizationPreActivation $200 \\ \\mathrm{ms}$. initialApsPositionAccuracy $\u003c 0.2 \\ \\mathrm{m}$. convergedApsPositionAccuracy $\u003c 0.1 \\ \\mathrm{m}$. apsPositionUpdateRate $1 \\ \\mathrm{Hz} \\pm 50 \\ \\mathrm{ms}$. gpsRecoverySignalThreshold Satellite count $\u003e 6$, C/N₀ $\u003e 35 \\ \\mathrm{dB-Hz}$ consistently. gpsRecoveryPositionConsistency GPS-APS difference $\u003c 0.5 \\ \\mathrm{m}$ for $\u003e 15 \\ \\mathrm{seconds}$. gpsRecoveryStabilityConfirmation No integrity flags for $\u003e 30 \\ \\mathrm{seconds}$. urbanMaskAngleIncrease from $5^{\\circ}$ to $15^{\\circ}$. urbanMultipathDetectionTrigger position oscillations $\u003e 3 \\ \\mathrm{m}$. droneNetworkMinimumActive $4$ drones (for 3D). droneNetworkOptimal $6-8$ drones. uwbRangingSNRThreshold $\u003e 20 \\ \\mathrm{dB}$. clockStabilityDriftThreshold $\u003c 0.1 \\ \\mathrm{ppm}$. singleDroneLossCapability - Continue with reduced accuracy (5 drones minimum for 3D). extendedEnvironmentalCalibrationDuration $\\ge 4$ hours - For establishing baseline measurements. calibrationThresholdConfidence $2-3$ sigma - For establishing detection thresholds. staticAlignmentTime $15$-minute stationary initialization for INS/GPS. wheelOdometryKnownDistanceTest Minimum $100$ meters for calibration. "},"title":"8 - Comprehensive Variables and Constants"},"/research/imass_cars_llm_agent_swarms/":{"data":{"":"IMASS (Intelligent Multi-Agent Swarm System) is a full-stack research project focused on developing a cyber-resilient, AI-driven localization system for land-based rovers operating in GPS-denied environments. This proof-of-concept integrates modern AI techniques, autonomous drone swarm behaviors, and real-time localization strategies.\nThe system leverages drone-based agents to deliver GPS-corrected positioning data to a ground rover, enabling accurate navigation without reliance on direct satellite signals.","key-contributions#Key Contributions":" AI-Driven Localization\nIntegrated large language model (LLM)-enhanced algorithms to assist with intelligent decision-making in communication and navigation protocols.\nPrecision through Physical Modeling\nApplied mathematical, geometric, and physical principles to synchronize radio-based communication with positioning calculations.\nEfficient Algorithms\nDesigned and implemented algorithms that optimize computational efficiency, reducing the need for high-cost hardware.\nCost vs. Accuracy Trade-Offs\nConducted system-level analyses to evaluate the balance between hardware expense and localization precision.\nError Analysis in 2D and 3D\nInvestigated localization constraints and sources of error, including:\nTime of Flight (ToF) distance estimation Multilateration methods Target occlusion and signal interference Swarm Coordination\nCollaborated across disciplines to develop swarm behaviors that adaptively reposition drones for optimal rover localization accuracy.\nIMASS represents a step toward resilient, intelligent autonomous systems capable of navigating complex and constrained environments through interdisciplinary innovation."},"title":"About IMASS - LLM-Enhanced Cyber-Resilient Design"},"/research/imass_cars_llm_agent_swarms/1_llms_and_agent_swarms/":{"data":{"":"","#":"Large Language Models (LLMs) fulfill several key roles and responsibilities in the context of controlling a swarm of agents, enhancing their capabilities and facilitating human interaction.\nHere’s a breakdown of their functions, how hallucinations are addressed, the use of algorithms for motion, and the advantages and challenges of integrating LLMs:\nRole and Responsibilities of LLMs in Swarm Control LLMs act as intelligent interfaces and decision-makers within a swarm, enabling a wide range of functionalities:\nHigh-Level Planning and Orchestration: LLMs are primarily responsible for interpreting high-level human instructions in natural language and translating them into executable commands and operational plans for the entire swarm. This includes defining target geometries for drone flocks, generating 3D objects, managing manufacturing processes, orchestrating workflows between robots, and creating sophisticated robot behavior trees. Task Understanding and Decomposition: They process ambiguous or complex natural language commands, break them down into manageable subtasks, and distribute them among agents. For instance, in MLOps, an LLM-powered system can decompose complex user queries into subtasks for managing ML workflows. Dynamic Adaptation and Real-Time Decision Making: LLMs allow agents to adapt and make informed decisions in real time in dynamic environments, such as adjusting coordination strategies based on evolving conditions or unexpected events. They can analyze the history of interactions to decide on the best collective actions. Generating and Refining Plans (e.g., Waypoints, Trajectories): LLMs can synthesize Python code to generate 3D waypoints for UAVs and create flight paths. In systems like FlockGPT, they determine the necessary direction and speed of movement for each drone. In LEVIOSA, LLMs generate waypoints from natural language and use a multi-critic consensus mechanism to refine trajectory planning. Interactive Editing and Communication: Users can interactively modify or provide comments during the construction of flock geometry models and communicate with the AI that responds textually, guiding the swarm. LLMs also enable more sophisticated interactions among robots and between robots and humans using natural language. Swarm Coordination and Consensus: They facilitate decentralized coordination by enabling each robot to independently generate a local plan and then refine it through influence-based consensus protocols. LLMs can act as response classifiers and coordinate agents to form a consensus for optimal response selection in trustless environments. Environmental Perception and Contextual Understanding: Multimodal LLMs, like GPT-4, can process images captured by leading UAVs to understand the environment, identify objects, and assess movable ranges. They integrate domain-specific knowledge through Retrieval-Augmented Generation (RAG) to provide context-aware responses. Monitoring and Reporting: LLMs can receive processed data from drones to generate comprehensive reports for tasks like infrastructure inspection and fault detection, extracting meaningful information that would otherwise require extensive manual post-processing. Preventing LLM Hallucinations and Ensuring Reliability Given the probabilistic nature of LLM responses and their susceptibility to generating plausible but incorrect outputs, several strategies are employed to mitigate hallucinations and ensure system reliability:\nMulti-Critic Consensus Mechanisms: Frameworks like LEVIOSA use multiple critic LLM agents to visually analyze generated waypoints, provide feedback, and assign scores, acting as a collaborative validation system. An aggregator agent then condenses this feedback, helping to reconcile conflicting opinions or filter out hallucinations from individual critics. Structured Validation and Closed-Loop Feedback: Approaches like LLMSTP implement an “LLM as Checker” role to detect and accurately map action commands to UAV functions, ensuring that generated plans are executable and safe, thus forming a closed loop. This prevents the direct execution of potentially erroneous LLM-generated code. Retrieval-Augmented Generation (RAG): RAG integrates external knowledge bases (e.g., vector databases of documentation) with LLMs. This grounds LLM responses in factual, domain-specific, or proprietary information, helping to mitigate hallucinations and provide accurate, context-rich guidance. Influence-Based Consensus: LLM-Flock integrates LLM-driven local planning with an influence-based consensus protocol to iteratively refine plans among robots. This structured negotiation mechanism helps to align individual, potentially inconsistent, LLM-generated plans, leading to more coherent and stable collective behaviors and mitigating inconsistencies in unstructured LLM reasoning. Agent Rating and Statistical Validation: In trustless environments, agents can be rated based on the reliability of their ranking assessments or response quality. Nodes with lower score deviations from the mean are considered more reliable and are given more influence in the consensus process, enhancing robustness. Heterogeneity of LLMs: Using diverse LLM architectures and models within a swarm can act as a natural defense against prompt engineering attacks. An input that might bias one model is unlikely to have the same effect across a variety of models, making it harder for malicious actors to universally deceive the swarm. Explicit Validation Procedures: For LLM-synthesized controllers, a three-step validation procedure (code review, logic validation, and security checking) can be applied to enhance robustness, reliability, and security before deployment. Algorithms for Precise Motion of Agents and Swarm Overall Yes, algorithms are extensively used for the precise motion of agents and the swarm overall, often complementing the high-level planning provided by LLMs. This typically involves a hierarchical control structure:\nLow-Level Control with Reinforcement Learning (RL): Frameworks like LEVIOSA use reinforcement learning for low-level control and flight error corrections. Individual RL policies are trained for each UAV to enable precise execution of high-level trajectories. Proximal Policy Optimization (PPO) is a commonly used RL algorithm for this purpose. Flocking Algorithms and Potential Fields: FlockGPT employs a flocking algorithm to ensure uniform distribution of drones and collision avoidance, often using the Artificial Potential Field (APF) method. This allows drones to move as a cohesive flow while avoiding collisions. LLM-Flock utilizes classical flocking rules such as separation, alignment, and cohesion. Path Planning Algorithms: Algorithms like Ant Colony Optimization (ACO), A algorithm* (including improved variants), and Particle Swarm Optimization (PSO) are employed for optimal path generation, trajectory planning, and target tracking. Collision Avoidance Mechanisms: Dedicated collision avoidance algorithms are integrated to guide UAVs around obstacles and maintain optimal paths, ensuring 100% mission completeness. Coordination Fields and Vortex Mechanisms: CoordField proposes a coordination field mechanism using continuously updated potential fields to guide UAV motion and task selection. A local vortex mechanism around each UAV generates a repulsive rotational field for inter-agent avoidance, contributing to dynamically stable task allocation. Behavior Trees: In systems like HIVE, behavior trees act as a middle layer to translate high-level LLM plans into low-level actions taken by individual units based on their local observations. Challenges of Using an LLM for Swarm Control Despite their potential, LLMs introduce several challenges:\nComputational Demands and Hardware Limitations: Modern LLMs are computationally intensive, making real-time applications challenging without significant architectural compromises. They are often too large to run on lightweight robot platforms, requiring external servers and persistent network connectivity, which can be problematic in infrastructure-free environments. Scalability Issues: As the number of agents increases, there’s a trade-off between response time and computational resources. Processing numerous inter-robot interactions can make prompts very complex, potentially exceeding token limits or leading to prolonged response times. The “curse of dimensionality” can increase convergence time. Logical Inconsistencies and Hallucinations: LLMs can exhibit hallucinated reasoning, logical inconsistencies, and generate plausible but incorrect outputs. This can lead to degenerate behaviors like agents collapsing or diverging chaotically. Spatial Reasoning and Long-Term Planning Limitations: LLMs currently struggle with integrating foundational spatial reasoning into coherent, multi-step logical processes, making it difficult to generate complex shapes requiring precise coordination. They also face challenges with long-term strategic planning and long-range causal reasoning, where errors can compound over time. Sensitivity to Input and Ambiguity: LLMs can be sensitive to slight variations in prompts and may produce misbehavior due to ambiguities in natural language instructions. Lack of Guaranteed Control and Security Vulnerabilities: The probabilistic nature of LLM responses means there’s no guarantee the swarm will behave as intended. This also introduces new attack vectors, such as prompt injection attacks or attempts to elicit private data, and the challenge of identifying Byzantine (malicious) robots. Information Overload: While more information can be beneficial, an overly broad perception view can increase the complexity of the LLM’s reasoning, potentially leading to diminishing returns or even degraded performance as it struggles to discern critical local cues from noisy data. Advantages of Using an LLM for Swarm Control Despite the challenges, LLMs offer significant advantages:\nIntuitive Natural Language Control: LLMs provide an intuitive and accessible interface for users to control swarms using natural language. This lowers technical barriers and allows users with varying technical backgrounds to manage complex operations. Scalability and Efficiency: LLMs can process natural language input once for the entire swarm, improving efficiency. In self-supervised inference, swarm architectures enable massively parallel response generation and asynchronous operations, achieving ultra-low latency (\u003c125ms) comparable to centralized solutions. Enhanced Reasoning and Adaptability: LLMs enable robots to reason, plan, and collaborate using natural language, allowing them to react to unanticipated challenges and adapt plans in real-time. They possess extensive world knowledge and common sense. Flexible and Generalized Planning: LLMs can generalize across different missions and generate formation strategies on the fly without explicit retraining. They empower robots with generative AI capabilities to manage processes dynamically. Improved Human-AI Collaboration: LLMs foster effective human-AI collaboration by combining human understanding and creativity with AI’s computational power. They can summarize swarm activities and understand human instructions to deviate from tasks. Automated Controller Synthesis: LLMs can be used indirectly to synthesize and validate robot controllers, potentially saving development time and allowing non-experts to design controllers. Collective Intelligence and Robustness: LLMs can leverage the collective intelligence of agent swarms to ensure high-quality, robust, and efficient decentralized AI inference. Model Swarms, for example, uses LLM experts in a collaborative search to adapt models, often leading to the discovery of previously unseen capabilities and robust performance. Transparency and Trustworthiness: When interactions are expressed in natural language, they are easier for humans to understand, which can enhance trustworthiness and improve accountability as human operators can audit decisions and actions. "},"title":"1 - Large Language Models and Agent Swarms High Level Overview"},"/research/imass_cars_llm_agent_swarms/2_hybrid_data/":{"data":{"":"","architecture-comparison#Architecture Comparison":"Traditional Single-System Approach (PostgreSQL + pgvector) Advantages:\nSingle system complexity\nACID compliance across all operations\nUnified tooling and administration\nSimplified deployment and monitoring\nLimitations:\nVector search performance constraints\nSchema rigidity for evolving telemetry\nScaling bottlenecks for mixed workloads\nResource contention between workload types\nHybrid Multi-System Approach (Qdrant + PostgreSQL) Advantages:\nOptimized performance for each data type\nIndependent scaling characteristics\nSchema flexibility where needed\nSpecialized indexing strategies\nTrade-offs:\nIncreased operational complexity\nCross-system coordination requirements\nAdditional failure modes to manage\nMore sophisticated monitoring needs","component-analysis#Component Analysis":"Qdrant for Vector Telemetry (Non-relational Data) Core Strengths:\nVector-native design: Built specifically for high-dimensional similarity search operations\nSchema flexibility: Payload-based storage allows dynamic field addition without schema migrations\nPerformance optimization: Rust-based implementation with specialized indexing (HNSW) for fast nearest-neighbor searches\nHorizontal scalability: Designed for distributed deployment across multiple nodes\nTelemetry Data Model:\nPoint Structure: - Vector: Numeric array representing key telemetry features (e.g., [x, y] coordinates) - Payload: JSON-like key-value pairs for metadata (status flags, sensor readings) Use Case Alignment:\nHandles streaming sensor data with evolving schemas\nSupports geospatial queries through vector similarity\nEnables time-decay scoring for prioritizing recent data\nAccommodates high-velocity writes without performance degradation\nPostgreSQL for Structured Messaging (Relational Data) Core Strengths:\nACID compliance: Ensures data consistency for critical conversational flows\nMature ecosystem: Extensive tooling, monitoring, and optimization options\nComplex relationships: Native support for joins, foreign keys, and referential integrity\nQuery flexibility: Rich SQL capabilities for analytical and operational queries\nMessaging Schema Design:\nCore Tables: - Users: Identity and profile management - Agents: AI agent/bot definitions - Conversations: Thread management linking users to interaction sessions - Messages: Individual message storage with sender attribution Use Case Alignment:\nMaintains conversation continuity and context\nSupports complex queries across user-agent interactions\nProvides audit trails and historical analysis\nEnables real-time message filtering and routing\nFastAPI Orchestration Layer Integration Responsibilities:\nUnified API surface: Single entry point for both telemetry and messaging operations\nAsync coordination: Handles concurrent operations across both data stores\nBusiness logic: Implements application-specific rules and workflows\nClient abstraction: Shields clients from underlying database complexity\nArchitectural Benefits:\nSeparation of concerns between vector and relational operations\nIndependent scaling of telemetry and messaging workloads\nFlexible deployment options (different hardware optimization per service)\nClean API contracts that survive underlying system changes","conclusion#Conclusion":"The hybrid Qdrant + PostgreSQL architecture provides a robust foundation for applications requiring both high-performance vector operations and structured data management. By leveraging each system’s strengths and coordinating through a well-designed API layer, organizations can achieve superior performance, scalability, and maintainability compared to single-system approaches.\nThe architecture’s success depends on careful implementation of the orchestration layer, comprehensive monitoring, and operational expertise in managing distributed systems. When properly implemented, it delivers significant advantages in handling complex, mixed-workload scenarios typical of modern telemetry and messaging applications.","executive-summary#Executive Summary":"This document presents a hybrid data architecture that combines Qdrant (vector database) and PostgreSQL (relational database) to handle distinct but complementary data patterns in telemetry and messaging systems. The architecture leverages each system’s strengths: Qdrant excels at high-dimensional vector operations and schema-flexible telemetry data, while PostgreSQL provides transactional integrity and relational structure for conversational data.","hybrid-retrieval-with-lightrag#Hybrid Retrieval with LightRAG":"Multi-Layer Search Strategy The RAG implementation combines three complementary search approaches:\n1. Vector Similarity Search\nSemantic matching through embedding similarity\nHandles fuzzy, context-aware queries\nDiscovers patterns across high-dimensional telemetry data\n2. Structured Filtering\nPrecise constraint application through SQL\nTime-based, location-based, and status-based filtering\nEnsures data quality and relevance\n3. Graph-Aware Ranking\nEntity relationship consideration\nContext prioritization based on system knowledge\nIntelligent result weighting beyond raw similarity scores\nQuery Flow Example For complex queries like “vehicles with communication issues near specific locations”:\nEmbedding Generation: User query converted to vector representation\nVector Search: Qdrant identifies semantically similar telemetry patterns\nRelational Filtering: PostgreSQL applies geographic and temporal constraints\nContext Augmentation: Results combined with conversational history\nLLM Generation: Comprehensive response generated from hybrid context","implementation-recommendations#Implementation Recommendations":"When to Choose This Architecture Ideal Scenarios:\nHigh-volume telemetry with conversational interfaces\nMixed structured and unstructured data requirements\nPerformance-critical vector similarity operations\nNeed for independent scaling of different workload types\nConsider Alternatives When:\nSimple data patterns with low volume\nStrong consistency requirements across all data\nLimited operational expertise for multi-system management\nCost sensitivity outweighs performance benefits\nMigration Strategy Phased Approach:\nAssessment: Current system performance and bottleneck identification\nPilot: Small-scale implementation with non-critical workloads\nParallel Operation: Gradual migration with fallback capabilities\nFull Deployment: Complete transition with monitoring and optimization","recommended-extensions-and-monitoring#Recommended Extensions and Monitoring":"PostgreSQL Enhancements PostGIS: Geospatial query capabilities\nTimescaleDB: Time-series data optimization\npg_cron: Automated maintenance tasks\npgvector: Backup vector storage option\nQdrant Optimizations gRPC API: High-performance data ingestion\nScalar Quantization: Memory usage optimization\nCustom Payload Indexes: Hybrid query acceleration\nMonitoring and Observability Qdrant Telemetry: Vector operation metrics\npgMonitor: Database performance tracking\nPrometheus + Grafana: Custom dashboard creation\nApplication-level metrics: End-to-end performance visibility","scaling-considerations#Scaling Considerations":"Component-Specific Scaling PostgreSQL Scaling:\nVertical scaling for compute-intensive queries\nRead replicas for query load distribution\nSharding strategies for geographic or functional partitioning\nConnection pooling for concurrent access management\nQdrant Scaling:\nCluster mode for distributed vector operations\nGeographical sharding for location-based workloads\nVector quantization for memory optimization\nReplication for availability and performance\nLightRAG Scaling:\nAsync worker pools for concurrent processing\nHorizontal scaling through container orchestration\nCircuit breakers for fault tolerance\nIdempotent operations for retry safety\nFailure Handling Strategies Data Durability:\nMulti-zone replication for both systems\nPoint-in-time recovery capabilities\nAutomated backup and archival processes\nOperational Resilience:\nHealth checking and automatic failover\nGraceful degradation during partial outages\nMonitoring and alerting for proactive intervention","security-considerations#Security Considerations":"Access Control PostgreSQL pgAudit: Comprehensive operation logging\nQdrant API Keys: Role-based vector access control\nLightRAG RBAC: Query and insert permission management\nData Protection Encryption at rest and in transit\nNetwork segmentation between components\nRegular security auditing and compliance checking","system-overview#System Overview":"The hybrid approach addresses the fundamental challenge of managing two distinct data types:\nNon-relational, High-frequency, schema-light telemetry data (position coordinates, sensor readings, status flags)\nRelational, Structured conversational data (user messages, agent interactions, conversation threads)\nA FastAPI-based orchestration layer coordinates both systems, while a Retrieval-Augmented Generation (RAG) framework like LightRAG enables intelligent querying across both data stores."},"title":"2 - Hybrid Data Architecture for Telemetry and Messaging using Qdrant + PostgreSQL"},"/research/imass_cars_llm_agent_swarms/3_uav_drone_cybersecurity/":{"data":{"":"","#":"Unmanned Aerial Vehicles (UAVs), commonly known as drones, are increasingly integrated into various applications, from military and surveillance to commercial delivery and disaster management. This widespread use, however, exposes them to significant cybersecurity and general security concerns, including cyber, physical, and hybrid attacks. The growing popularity of drones is accompanied by security issues due to the unregulated connection between drones and ground control stations.\nI. General Security Concerns for Drones and UAVs UAVs face a multitude of security and privacy challenges due to their intricate nature and the integration of robotics and embedded systems into society.\nCyber Threats: These include aviation control, navigation systems, ATMs, wireless communication devices, hacking, spoofing, jamming, and communication interception. Physical Threats: These encompass kinetic attacks, theft, and reverse engineering, which can damage UAVs or lead to the theft of sensitive data and technology. Hybrid Threats: These combine elements of both cyber and physical attacks. Privacy Concerns: Unauthorized surveillance and data breaches are significant privacy issues, with sensitive information potentially exposed through intercepted data. Drones with high-resolution cameras can capture detailed images, raising apprehensions about surveillance and data misuse. Insider Threats: Internal actors, whether intentionally or unintentionally, can compromise UAV operations or disclose confidential information. Environmental Threats: Adverse weather and challenging geographical terrain can affect UAV performance and security. Public Safety: Drones can pose threats to essential infrastructures like government buildings, energy facilities, transportation networks, and communication systems if weaponized. The increasing presence of drones in airspace heightens the risk of mid-air collisions with manned aircraft. Regulatory and Ethical Issues: The absence of standardized security procedures, inadequate operator training, and the need for compliance with regulations are persistent challenges. Ethical concerns include autonomy, transparency, and accountability. Limited Resources: UAVs often have limited computing resources, memory, battery life, and processing power, which constrains the implementation of robust security measures. This can also affect flight time and storage capacity. Scalability: Managing a large number of UAVs in a swarm presents significant challenges for secure communication and coordination. Integration Challenges: Integrating UAVs into existing cybersecurity infrastructures can be difficult due to compatibility issues and a lack of interoperability. II. Specific Vulnerabilities and Mitigation Techniques Drones and UAVs are vulnerable at multiple levels: communication, navigation, software, hardware, data, routing, identity, and AI/ML models.\nA. Communication Vulnerabilities Weakness: Unencrypted Communication \u0026 Eavesdropping\nMany UAVs use unencrypted or weakly encrypted wireless communication channels for data transmission, making them susceptible to interception, eavesdropping, and unauthorized access. Eavesdropping involves covertly intercepting UAV communication to gather sensitive information or intelligence. Mitigation Techniques: Data Encryption: Implement robust encryption algorithms like AES-128 to protect data transmission between UAVs and ground control stations (GCS) or other connected devices. This ensures data confidentiality and integrity. Quantum Key Distribution (QKD): Provides unconditional security for cryptographic keys between UAVs and ground stations, mitigating future quantum computing threats. Secure Communication Protocols: Utilize protocols like Transport Layer Security (TLS) to safeguard data integrity. Ensure real-time continuous two-way data transfer that is impossible to intercept or manipulate. Authenticated Encryption: Adopt authenticated encryption to protect UAV-2-GCS communications by ensuring confidentiality and authenticity of exchanged data. Anti-Eavesdropping Power Control Algorithms: Optimize trajectory and transmit power control between UAVs and the GCS to maximize the secrecy rate. Weakness: Jamming Attacks\nJamming attacks involve transmitting noise to disrupt a receiver’s ability to extract information, leading to communication blackouts, system overload, and compromised functionality. Most commercial UAVs lack anti-jamming features. Mitigation Techniques: Frequency Hopping Spread Spectrum (FHSS): Frequently changes transmission frequencies and signals to prevent jamming. Adaptive Modulation and Coding Techniques: Used in secure wireless communication protocols to ensure reliable communication even in hostile environments. Advanced Signal-Processing Algorithms: Enhance anti-jamming performance. Jamming Tracking Networks: Multiple legitimate UAVs can form a network to actively locate and suppress malicious jamming sources. Game Theory Approach: Game theory, like the Stackelberg game, can be formulated to model interactions between a jammer and UAVs, providing efficient solutions to mitigate attacks. Dual-UAV System: One UAV can communicate with ground users while another jams eavesdroppers. Knowledge-Based Reinforcement Learning: Mitigates the impact of smart jammers on UAV networks by compressing the agent’s exploration of the state space, improving convergence speed despite limited computational resources. Beamforming: Utilizes antenna arrays to focus signals in a specific direction, improving communication security and reducing interference. Weakness: Authentication Attacks \u0026 Unauthorized Access\nVulnerabilities in identification and authorization methods can lead to unauthorized access, allowing attackers to guess credentials, crack tokens, or perform man-in-the-middle attacks to seize control or manipulate individual UAVs. The absence of standardized security procedures and inadequate operator training can introduce vulnerabilities. Mitigation Techniques: Strong Authentication Mechanisms: Implement multi-factor authentication, digital certificates, or biometric verification to confirm user and device identity. Access Control Measures: Restrict privileges and permissions based on user roles and responsibilities. AAA Framework: The Authentication, Authorization, and Accounting framework defines criteria for drone operation, granting privileges to controllers and establishing stringent authentication procedures. Mutual Authentication: Crucial for secure communication between fog drones and edge drones in a swarm, especially to prevent man-in-the-middle attacks. Identity-Based Encryption: Helps establish a secure communication scheme. Blockchain Technology: Can enhance proper communication among UAV units with correct identification and data exchange, offering a decentralized, tamper-proof ledger for transaction records and data exchanges. This also supports authentication and access control. Public Key Infrastructure (PKI): Essential for secure exchanges of public keys and certificates. Continuous Authentication: Can identify a pilot’s unique profile during flight. Fingerprinting Techniques: Authenticate UAVs. B. Navigation \u0026 Mission Planning Vulnerabilities Weakness: GPS Spoofing\nGPS spoofing involves transmitting fake GPS signals to mislead UAVs, potentially redirecting them to predetermined locations for capture, hijacking operations, or causing mid-air collisions. Most drones accept unencrypted GPS signals. Mitigation Techniques: Cryptographic Methods \u0026 Anti-Spoofing Technologies: Verify original GPS signals. Alternative Navigation Systems: Integrate inertial navigation, visual odometry, or additional sensors for navigation when GPS signals are unavailable or compromised. Cooperative Localization \u0026 Dynamic Defense Frameworks: Enhance GPS spoofing detection. Signal Strength Monitoring \u0026 Time Interval Checks: Monitor signal strength, check time intervals, and use multiple receiver setups to identify sophisticated spoofing attacks. Cross-Verification of Sensor Data: Gather readings from alternative sensors to cross-verify data and detect false data injection. Physical Properties Modeling: Model UAV’s physical properties through a control invariant approach to detect external sensor attacks. Detection of Unusual Signal Power Changes: Identifies the start of a spoofing attack. Collaborative Data Attestation: In multi-UAV scenarios, verifies the correctness of shared information like GPS coordinates. Weakness: Collision Risks \u0026 Control Manipulation\nUAVs can face collision risks due to environmental hazards, blind flight from disabled sensors, or malicious manipulation of control and task allocation algorithms. Improper control commands or software errors can cause crashes. Mitigation Techniques: Advanced Navigation \u0026 Sensing: Implement precise localization, optimal path planning algorithms that consider mission objectives, obstacles, and energy efficiency, and collision avoidance systems using LiDAR, radar, and cameras. AI/ML for Autonomous Navigation \u0026 Control: Utilize machine learning algorithms to enhance autonomy in navigation, facilitate adaptive decision-making, and optimize flight trajectories and evasion. Reinforcement Learning: For dynamic path planning, optimizing resource allocation, obstacle avoidance, and energy saving. Multilayer Security Framework: For Wi-Fi-based UAVs, incorporates a watchdog timer, input data filtering, and anti-spoofing measures to prevent buffer overflows and ensure control. Adaptive Mission Planning: Enables UAV swarms to dynamically adjust plans and tasks in response to changing mission requirements, environmental conditions, and unexpected events. This includes predictive analytics and optimization algorithms. Robustness of AI Decision Systems: Ensure reliability through formal testing, validation, and verification processes. Consider hybrid autonomy models that combine human oversight and intervention where necessary. C. Software Vulnerabilities Weakness: Malicious Software \u0026 Software Exploits\nUAV software is vulnerable to attacks such as buffer overflows, code injection, cross-site scripting (XSS), cryptography flaws, device operation issues, encoding problems, and input validation weaknesses. Malware can infiltrate UAV software, granting unauthorized access, inducing malfunctions, or stealing sensitive information. Ransomware could target UAVs in the future. Mitigation Techniques: Secure Coding \u0026 Updates: Implement secure coding techniques, perform frequent security upgrades and patches, and choose reputable software sources. Secure Boot \u0026 Code Integrity Checks: Help guard against unauthorized firmware alterations and guarantee legitimacy. Antivirus \u0026 IDS Solutions: Deploy intrusion detection systems (IDS) to monitor network traffic, spot irregularities, and recognize potential cyber threats like malware. Machine learning algorithms can be used to detect malicious activity. Software-Based Attestation: Approaches that ensure the integrity of software running on the flight stack. Automated Penetration Testing \u0026 Fuzz Testing: Leverage AI and machine learning to quickly and accurately identify vulnerabilities by inputting random and unexpected data into the system. Bounded Model Checking (BMC) \u0026 Fuzzing: Techniques combined to detect vulnerabilities in UAV software, exemplified by the “UAV Fuzzer” tool. Predictive Maintenance: Utilize machine learning to analyze past performance data and identify parts that may soon require maintenance, reducing downtime and risks. Weakness: Zero-Day Vulnerabilities\nUnknown vulnerabilities may exist in the UAV’s flight stack or GCS software that can present critical threats until patches are released. Mitigation Techniques: Proactive Vulnerability Management: Continuous monitoring for vulnerabilities and prompt application of patches and updates. Advanced Intrusion Detection Systems: Use systems capable of detecting anomalous behavior that might indicate exploitation of zero-day vulnerabilities. Multilayer Security Frameworks: Designed to address a broad range of attacks beyond known exploits. D. Hardware Vulnerabilities Weakness: Physical Tampering \u0026 Theft\nUAVs can be physically tampered with, stolen, or damaged through kinetic attacks (e.g., projectiles), providing unauthorized access to sensitive data or allowing malicious use. Hardware components can be manipulated if not tamper-proof. Mitigation Techniques: Physical Security Measures: Implement tamper-resistant enclosures, anti-tampering mechanisms, and geofencing to prevent unauthorized physical access and protect against theft or sabotage. Hardware Penetration Testing: Focus on the physical components of the UAV using techniques like side-channel analysis and tampering tests to evaluate resilience against physical attacks. Physical Isolation: For acoustic sensory channels to shield sound noise. Automated Monitoring: The HCIUV framework ensures real-time detection of unauthorized physical access or tampering attempts through hash chain verification mechanisms. Authenticated Encryption: Secure the GCS and UAVs from unauthorized access using authenticated encryption. Consistent Change of Flight Path: To avoid adversaries identifying flight patterns, making physical theft more difficult. Hijacking Detection Methods: Based on statistical analysis of standard flight patterns. Weakness: Supply Chain \u0026 Hardware Trojans\nVulnerabilities in the supply chain can pose security risks. Hardware trojans can be maliciously embedded in the semiconductor supply chain of the Flight Controller, compromising functionalities and security features. Mitigation Techniques: Supply Chain Security Management: Manage the security of the supply chain during the manufacturing process to avoid compromised UAV components. Tamper-Proofing Solutions: Implement solutions like tamper-proof microprocessors and anti-tamper software to disable unauthorized physical or logical modifications. ML-Based IDSs for Hardware Attacks: Develop intrusion detection systems that use machine learning to detect hardware trojans by learning from Pulse Width Modulation (PWM) signals and training with malicious data. Fine-Grained Circuit Analysis: Perform detailed analysis to detect hardware trojans. Weakness: Battery Depletion \u0026 Power Management\nUAVs are susceptible to battery depletion attacks, which can be caused by physical tampering, swapping legitimate batteries, or deep discharging through compromised components like spoofed sensors or injected malware. Limited battery life affects utilization time and capabilities. Mitigation Techniques: Safety Circuits in Battery Management Systems (BMS): Ensure physical battery protection for UAVs. Pre-Flight Diagnosis \u0026 Real-Time Monitoring: Conduct pre-flight diagnosis of UAV batteries and monitor the battery discharging process in real-time. Cryptographic Solutions: Secure UAV-2-GCS data transmission to prevent counterfeiting of battery information. ML Techniques for Detection: Use machine learning to detect UAV battery depletion attacks. Advanced Battery Technologies \u0026 Energy Management: Develop lightweight, high-capacity batteries, and new energy harvesting solutions (e.g., solar panels, wireless power transfer) to extend flight time and operational range. Implement energy-efficient propulsion systems and optimize flight. E. Data Vulnerabilities Weakness: Data Exfiltration \u0026 Tampering UAV operations face cybersecurity threats from data exfiltration. Data can be altered in transit, leading to compromised UAV operations or navigation errors. False data injection can mislead navigation systems. Privacy leakage is a significant concern due to the collection of sensitive information. Mitigation Techniques: Data Encryption: Encrypt all transmitted data to protect confidentiality and integrity. Data Integrity Checks: Ensure data integrity through encoding. The HCIUV framework implements hash chains to create a verifiable chain of custody for transmitted data, ensuring non-repudiation and tamper-evidence. Privacy-Preserving Technologies: Employ secure multiparty computation, differential privacy, homomorphic encryption, and Zero Knowledge Proof (ZPF) to protect data privacy during computations and storage. Secure Data Aggregation: Use encryption techniques during data aggregation to provide confidentiality. Access Policies \u0026 Lightweight Cryptography: Implement stringent access controls and lightweight cryptographic solutions for energy-constrained UAVs. NoFlyZone Database: Manufacturers can include no-fly GPS coordinates in firmware to address privacy. Blockchain for Data Integrity: Blockchain technology can ensure data integrity by providing a decentralized, tamper-proof ledger for transaction records and data exchanges. This makes collected information traceable and trustworthy. F. Routing Vulnerabilities Weakness: Routing Attacks (Black Hole, Gray Hole, Wormhole) UAV swarm networks rely on complex multi-hop routing mechanisms, but their dynamic and highly dependent network structure can be exploited. Attackers can forge routing update messages to trigger black hole attacks (packets absorbed and dropped by malicious nodes) or tamper with routing information to redirect or drop packets. Wormhole and gray hole attacks also pose threats. Mitigation Techniques: AI-Based Secure Routing Protocols: Research into Artificial Intelligence (AI)-based secure routing protocols, including topology prediction and adaptive learning-based methods, can offer new solutions for robust routing in UAV swarm networks. Intrusion Detection \u0026 Prevention Systems: Deploy IDPS to detect and prevent routing attacks by monitoring network traffic for anomalous behavior. Blockchain for Trusted Self-Organizing Networks: Blockchain-based frameworks can ensure secure data transmission and decision-making by creating a trusted self-organizing network. Secure Routing Measures: Implement secure routing measures to prevent redirection of data traffic to malicious nodes. G. ML Model Vulnerabilities Weakness: Adversarial Examples \u0026 Data Contamination Machine Learning (ML) models used in UAV swarms (e.g., for power management, resource allocation, flight path planning, target identification) are vulnerable to adversarial examples or data contamination during training, which can mislead decision-making. Computational resource limitations and data quality challenges make complex deep learning models difficult to implement and train on UAVs. Mitigation Techniques: Blockchain, Homomorphic Encryption (HE), Differential Privacy (DP), \u0026 Secure Multi-party Computation (SMC): These techniques are used to mitigate security and privacy attacks targeting ML models in UAV swarm networks. Federated Learning \u0026 Multi-Agent Reinforcement Learning: Advanced distributed learning techniques such as federated learning, multi-agent reinforcement learning, decentralized inference, and split learning are pivotal for enabling sophisticated collaborative UAV swarm systems. Anomaly Detection with AI/ML: Analyze live video streams and sensor data to identify anomalies, patterns of interest, and potentially unsafe intruding UAVs. Explainable Artificial Intelligence (XAI): Enhances AI systems’ ability to provide clear and understandable reasoning for their decisions and actions, increasing operator confidence and aiding problem diagnosis. Robustness of AI Decision Systems: Advance the robustness of AI decision systems using formal testing, validation, and verification processes. H. Identity Vulnerabilities Weakness: Impersonation \u0026 Sybil Attacks Identity-based attacks are serious threats where malicious entities can impersonate legitimate users or nodes (Sybil attack) to infiltrate the network, leading to packet dropping or other malicious operations. Challenges exist in designing multi-factor user authentication schemes due to resource constraints and unstable network connectivity. Mitigation Techniques: Strong Authentication Mechanisms: Implement multi-factor authentication, digital certificates, or biometric verification. Access Control Measures: Restrict privileges and permissions based on user roles. Intelligent Hybrid Scheme: Can effectively address fault identification and improve resistance against threats and malicious actions. Blockchain for Identity: Ensures proper identification of UAVs and correct data exchange by providing a decentralized, tamper-proof ledger for transactions. Mutual Authentication: Crucial in drone swarms to prevent man-in-the-middle and impersonation attacks. Replay Attack Prevention: Required to maintain security against repeated valid information transfers. Strong Encryption, Authentication, and Integrity Checks: Secure all communication flows within UAV swarms. I. Resource Vulnerabilities Weakness: Resource Exhaustion (Battery \u0026 Bandwidth) UAV swarm networks have limited computational and communication resources, making them susceptible to resource exhaustion attacks that can lead to bandwidth exhaustion and drone power depletion. “Sleeper” malware can also consume resources. Mitigation Techniques: Energy-Efficient Design: Develop energy-efficient propulsion systems, high-density batteries, and leverage solar power to extend flight endurance. Optimized Resource Allocation: Use machine learning algorithms to optimize resource allocation, including fuel consumption, battery life, and payload capacities, to minimize downtime and extend operational range. Distributed Scheduling: Implement distributed scheduling among drones for battery recharging to extend overall flight time. Advanced Communication Protocols: Design protocols that optimize data transmission to conserve battery power and enhance overall swarm performance and endurance. SDN: Software-Defined Networking can improve network efficiency and agility to respond swiftly to operational adjustments, potentially aiding in bandwidth management. By adopting these comprehensive security measures, UAV systems can enhance their defenses, ensuring robust protection against current and future cybersecurity challenges in dynamic and hostile operational environments."},"title":"3 - UAV/Drone Cybersecurity and Security Concerns"}}